"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preset = void 0;
const _excluded = ["presetEnv", "presetReact", "hasReact", "useReactJsxRuntime"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// tslint:disable no-any
const preset = (opts = {}) => {
  // from CRA
  // This is similar to how `env` works in Babel:
  // https://babeljs.io/docs/usage/babelrc/#env-option
  // We are not using `env` because it’s ignored in versions > babel-core@6.10.4:
  // https://github.com/babel/babel/issues/4539
  // https://github.com/facebook/create-react-app/issues/720
  // It’s also nice that we can enforce `NODE_ENV` being specified.
  const env = process.env.BABEL_ENV || process.env.NODE_ENV; // Extract this preset specific options and pass the rest to @babel/preset-env

  const _ref = opts || {},
        {
    presetEnv = {},
    presetReact = {},
    hasReact = true,
    useReactJsxRuntime = false
  } = _ref,
        noPlugins = _objectWithoutProperties(_ref, _excluded); // Create the presets


  const presets = [[require.resolve('@babel/preset-env'), _objectSpread({
    modules: env === 'test' ? 'commonjs' : false
  }, presetEnv)]]; // Add react if needed

  if (hasReact) {
    presets.push([require.resolve('@babel/preset-react'), _objectSpread({
      // Put development based on BABEL_ENV
      // Adds component stack to warning messages
      // Adds __self attribute to JSX which React will use for some warnings
      development: env !== 'production',
      // Will use the native built-in instead of trying to polyfill
      // behavior for any plugins that require one.
      useBuiltIns: true,
      runtime: useReactJsxRuntime ? 'automatic' : 'classic'
    }, presetReact)]);
  } // Create the plugins


  const plugins = [];
  const wannabePlugins = {
    noDynamicImport: require.resolve('@babel/plugin-syntax-dynamic-import'),
    noImportMeta: require.resolve('@babel/plugin-syntax-import-meta'),
    noClassProperties: [require.resolve('@babel/plugin-proposal-class-properties'), {
      loose: false
    }],
    noJsonStrings: require.resolve('@babel/plugin-proposal-json-strings'),
    noRuntime: [require.resolve('@babel/plugin-transform-runtime'), {
      corejs: false,
      helpers: true,
      regenerator: true,
      // We might wanna turn it on once node LTS has ESModules support
      useESModules: env !== 'test'
    }],
    noOptionalChaining: require.resolve('@babel/plugin-proposal-optional-chaining'),
    noNullishCoalescingOperator: require.resolve('@babel/plugin-proposal-nullish-coalescing-operator')
  }; // Add them, only if user hasn't explicitly disabled it

  Object.keys(wannabePlugins).forEach(pKey => {
    if (noPlugins[pKey] !== true) {
      plugins.push(wannabePlugins[pKey]);
    }
  }); // Necessary to include regardless of the environment because
  // in practice some other transforms (such as object-rest-spread)
  // don't work without it: https://github.com/babel/babel/issues/7215

  plugins.push([require.resolve('@babel/plugin-transform-destructuring'), {
    // Use loose mode for performance:
    // https://github.com/facebook/create-react-app/issues/5602
    loose: false,
    selectiveLoose: ['useState', 'useEffect', 'useContext', 'useReducer', 'useCallback', 'useMemo', 'useRef', 'useImperativeHandle', 'useLayoutEffect', 'useDebugValue']
  }]); // Return the preset and some of stage-3 plugins
  // We will remove them, once it becomes stage-4, i.e included in preset-env

  return {
    presets,
    plugins
  };
};

exports.preset = preset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,