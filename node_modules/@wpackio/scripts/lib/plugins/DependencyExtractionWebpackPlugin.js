"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependencyExtractionWebpackPlugin = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _ops = require("../dev-utils/ops");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DependencyExtractionWebpackPlugin {
  constructor(options = {
    gutenbergOptimized: false,
    appDir: ''
  }) {
    _defineProperty(this, "externalizedDeps", void 0);

    _defineProperty(this, "externalsPlugin", void 0);

    _defineProperty(this, "compiler", null);

    _defineProperty(this, "assetDependenciesData", void 0);

    _defineProperty(this, "options", void 0);

    this.options = _objectSpread({}, options);
    /*
     * Track requests that are externalized.
     *
     * Because we don't have a closed set of dependencies, we need to track what has
     * been externalized so we can recognize them in a later phase when the dependency
     * lists are generated.
     */

    this.externalizedDeps = new Set(); // Offload externalization work to the ExternalsPlugin.

    this.externalsPlugin = new _webpack.default.ExternalsPlugin('window', this.externalizeWpDeps.bind(this));
    this.assetDependenciesData = [];
  }

  externalizeWpDeps(_context, request, callback) {
    let externalRequest = (0, _ops.wpackioRequestsToExternals)(request);

    if (this.options.gutenbergOptimized) {
      externalRequest = (0, _ops.defaultRequestToExternal)(request);
    }

    if (externalRequest) {
      this.externalizedDeps.add(request);
      return callback(null, externalRequest);
    }

    return callback();
  }

  mapRequestToDependency(request) {
    let requestToHandle = _ops.wpackioRequestToHandle;

    if (this.options.gutenbergOptimized) {
      requestToHandle = _ops.defaultRequestToHandle;
    }

    const scriptDependency = requestToHandle(request);

    if (scriptDependency) {
      return scriptDependency;
    }

    return request;
  }

  stringify(asset) {
    return JSON.stringify(asset, null, 2);
  }
  /**
   * Write the asset manifest to the file system.
   *
   * @param {string} destination
   */


  async writeTo(destination, content) {
    await (0, _ops.lock)(destination);
    await _fs.default.promises.mkdir(_path.default.dirname(destination), {
      recursive: true
    });
    await _fs.default.promises.writeFile(destination, content, {
      encoding: 'utf8'
    });
    await (0, _ops.unlock)(destination);
  }

  handleEmit(compilation) {
    if (!this.compiler) {
      return;
    } // Process each entry point independently.


    for (const [entrypointName, entrypoint] of compilation.entrypoints.entries()) {
      const entrypointExternalizedWpDeps = new Set();

      const processModule = req => {
        const {
          userRequest
        } = req;

        if (this.externalizedDeps.has(userRequest)) {
          const scriptDependency = this.mapRequestToDependency(userRequest);
          entrypointExternalizedWpDeps.add(scriptDependency);
        }
      }; // Search for externalized modules in all chunks.


      for (const chunk of entrypoint.chunks) {
        for (const chunkModule of chunk.modulesIterable) {
          processModule(chunkModule); // loop through submodules of ConcatenatedModule

          if (chunkModule.modules) {
            for (const concatModule of chunkModule.modules) {
              processModule(concatModule);
            }
          }
        }
      }

      const runtimeChunk = entrypoint.getRuntimeChunk();
      const assetData = {
        // Get a sorted array so we can produce a stable, stringified representation.
        dependencies: Array.from(entrypointExternalizedWpDeps).sort(),
        version: runtimeChunk.hash
      };
      const assetString = this.stringify(assetData);
      const fileName = `${entrypointName.split('?', 2)[0]}.dependencies.wp.json`;

      const outputPath = _path.default.resolve(this.compiler.outputPath, this.options.appDir, fileName);

      const assetPath = compilation.getPath(outputPath, {
        chunk: {
          name: 'dependencies.wp'
        },
        filename: fileName,
        contentHash: ''
      });
      this.assetDependenciesData.push({
        content: assetString,
        path: assetPath
      });
    }
  }

  async handleAfterEmit() {
    if (!this.assetDependenciesData.length) {
      return;
    }

    for (const data of this.assetDependenciesData) {
      // eslint-disable-next-line no-await-in-loop
      await this.writeTo(data.path, data.content);
    }
  }

  apply(compiler) {
    this.compiler = compiler;
    this.externalsPlugin.apply(compiler);
    compiler.hooks.emit.tap(this.constructor.name, this.handleEmit.bind(this));
    compiler.hooks.afterEmit.tapPromise(this.constructor.name, this.handleAfterEmit.bind(this));
  }

}

exports.DependencyExtractionWebpackPlugin = DependencyExtractionWebpackPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,