import prompts from 'prompts';
interface ProjectConfigContext {
    appName: string;
    type: string;
    slug: string;
    author: string;
    license: string;
    outputPath: string;
    hasReact: 'true' | 'false';
    hasFlow: 'true' | 'false';
    hasTS: 'true' | 'false';
    hasSass: 'true' | 'false';
    hasLess: 'true' | 'false';
    watch: string;
}
interface ServerConfigContext {
    proxy: string;
}
export interface ProjectDependencies {
    dependencies: string[];
    devDependencies: string[];
}
declare class InitResolve {
    configured: 'project' | 'server' | 'deps';
    projectConfigContext?: ProjectConfigContext;
    serverConfigContext?: ServerConfigContext;
    deps?: ProjectDependencies;
    constructor(configured: 'project' | 'server' | 'deps', serverConfigContext?: ServerConfigContext, projectConfigContext?: ProjectConfigContext, deps?: ProjectDependencies);
}
export declare class Bootstrap {
    private cwd;
    private projectConfigPath;
    private serverConfigPath;
    private packageJsonPath;
    private pkg;
    private version;
    constructor(cwd: string, version: string);
    bootstrap(): Promise<InitResolve>;
    getUserInput(): Promise<prompts.Answers<"appName" | "type" | "slug" | "outputPath" | "watch" | "features">>;
    /**
     * Create project config file and return user provided context.
     */
    private initProjectConfig;
    /**
     * Create server config file and return user provided context.
     */
    private initServerConfig;
    /**
     * Create a default production ready (90%+ global coverage)
     * browserlistrc file for your project and a postcss.config.js
     * file.
     */
    private initSharedConfigFiles;
    /**
     * Configure package.json file and figure which dependencies to install.
     */
    private configureScripts;
    private getDependencies;
    private isConfigPresent;
    private fileExists;
}
export {};
