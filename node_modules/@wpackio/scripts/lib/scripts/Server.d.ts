import webpack from 'webpack';
import { ProjectConfig } from '../config/project.config.default';
import { ServerConfig } from '../config/server.config.default';
interface FormattedMessage {
    errors: string[];
    warnings: string[];
    name?: string;
}
interface Callbacks {
    invalid(): void;
    done(stats: webpack.Stats): void;
    firstCompile(stats: webpack.Stats | undefined): void;
    onError(err: FormattedMessage): void;
    onWarn(warn: FormattedMessage): void;
    onBsChange(file: string): void;
    onEmit(stats: webpack.Stats): void;
    onTcStart(name?: string): void;
    onTcEnd(err: FormattedMessage): void;
    onWatching(): void;
    onInfo(msg: string, symbol: string): void;
}
/**
 * Create a development server with file watching, hot reload and live reload.
 * Everything is done with browserSync and webpack middleware.
 */
export declare class Server {
    private projectConfig;
    private serverConfig;
    private cwd;
    private isServing;
    private bs?;
    private devMiddlewares?;
    private webpackConfig;
    private isBrowserOpened;
    private firstCompileCompleted;
    private callbacks;
    private hasTs;
    private tsConfigPath;
    private priorFirstCompileTsMessage;
    static getEntriesSelection(projectConfig: ProjectConfig): Promise<number[]>;
    /**
     * Create an instance.
     *
     * @param projectConfig Project configuration as recovered from user directory.
     * @param serverConfig Server configuration as recovered from user directory.
     */
    constructor(projectConfig: ProjectConfig, serverConfig: ServerConfig, cwd: string, callbacks: Callbacks, entries?: number[]);
    /**
     * Serve the webpack/browserSync hybrid server.
     */
    serve(): void;
    /**
     * Get URL to network IP where the server is alive.
     */
    getServerUrl(): string;
    /**
     * Get URL to browserSync UI.
     */
    getBsUiUrl(): string | boolean;
    /**
     * Open browser if not already opened and config says so.
     */
    openBrowser(): Promise<void>;
    /**
     * Add hooks to compiler instances.
     */
    addHooks: (compiler: webpack.Compiler) => void;
    private addTsHooks;
    /**
     * Stop the server and clean up all processes.
     */
    stop(): void;
    /**
     * Recompile everything through webpack.
     */
    refresh(): void;
}
export {};
