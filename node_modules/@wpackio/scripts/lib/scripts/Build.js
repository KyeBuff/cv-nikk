"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Build = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _devUtils = require("../dev-utils");

var _CreateWebpackConfig = require("../config/CreateWebpackConfig");

var _serverConfig = require("../config/server.config.default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Create production ready files.
 */
class Build {
  constructor(projectConfig, cwd) {
    _defineProperty(this, "projectConfig", void 0);

    _defineProperty(this, "cwd", void 0);

    this.projectConfig = projectConfig;
    this.cwd = cwd;
  }
  /**
   * Build the files.
   */


  build(progress) {
    return new Promise((resolve, reject) => {
      const config = new _CreateWebpackConfig.CreateWebpackConfig(this.projectConfig, _serverConfig.serverConfigDefault, this.cwd, false);
      const webpackConfig = config.getWebpackConfig();
      const compiler = (0, _webpack.default)(webpackConfig);
      new _webpack.default.ProgressPlugin((percentage, msg) => {
        progress(percentage, msg);
      }).apply(compiler);

      try {
        compiler.run((err, stats) => {
          const raw = stats.toJson('verbose');
          const messages = (0, _devUtils.formatWebpackMessages)(raw);
          const outputLog = stats.toString({
            colors: true,
            assets: true,
            chunks: false,
            entrypoints: false,
            hash: false,
            version: false,
            modules: false,
            builtAt: false,
            timings: false,
            warnings: false,
            errors: false
          });

          if (!messages.errors.length && !messages.warnings.length) {
            // All good
            resolve({
              status: 'success',
              log: outputLog
            });
          }

          if (messages.errors.length) {
            reject(messages.errors.join('\n\n'));
          }

          resolve({
            status: 'warn',
            log: outputLog,
            warnings: messages.warnings
          });
        });
      } catch (e) {
        console.log(e);
        console.log(JSON.stringify(e, null, 2));
        reject(e);
      }
    });
  }

}

exports.Build = Build;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL0J1aWxkLnRzIl0sIm5hbWVzIjpbIkJ1aWxkIiwiY29uc3RydWN0b3IiLCJwcm9qZWN0Q29uZmlnIiwiY3dkIiwiYnVpbGQiLCJwcm9ncmVzcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uZmlnIiwiQ3JlYXRlV2VicGFja0NvbmZpZyIsInNlcnZlckNvbmZpZ0RlZmF1bHQiLCJ3ZWJwYWNrQ29uZmlnIiwiZ2V0V2VicGFja0NvbmZpZyIsImNvbXBpbGVyIiwid2VicGFjayIsIlByb2dyZXNzUGx1Z2luIiwicGVyY2VudGFnZSIsIm1zZyIsImFwcGx5IiwicnVuIiwiZXJyIiwic3RhdHMiLCJyYXciLCJ0b0pzb24iLCJtZXNzYWdlcyIsIm91dHB1dExvZyIsInRvU3RyaW5nIiwiY29sb3JzIiwiYXNzZXRzIiwiY2h1bmtzIiwiZW50cnlwb2ludHMiLCJoYXNoIiwidmVyc2lvbiIsIm1vZHVsZXMiLCJidWlsdEF0IiwidGltaW5ncyIsIndhcm5pbmdzIiwiZXJyb3JzIiwibGVuZ3RoIiwic3RhdHVzIiwibG9nIiwiam9pbiIsImUiLCJjb25zb2xlIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUVBOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxLQUFOLENBQVk7QUFLbEJDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBRCxFQUErQkMsR0FBL0IsRUFBNEM7QUFBQTs7QUFBQTs7QUFDdEQsU0FBS0QsYUFBTCxHQUFxQkEsYUFBckI7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDQTtBQUVEO0FBQ0Q7QUFDQTs7O0FBQ1FDLEVBQUFBLEtBQUssQ0FBQ0MsUUFBRCxFQUlUO0FBQ0YsV0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3ZDLFlBQU1DLE1BQU0sR0FBRyxJQUFJQyx3Q0FBSixDQUNkLEtBQUtSLGFBRFMsRUFFZFMsaUNBRmMsRUFHZCxLQUFLUixHQUhTLEVBSWQsS0FKYyxDQUFmO0FBTUEsWUFBTVMsYUFBYSxHQUFHSCxNQUFNLENBQUNJLGdCQUFQLEVBQXRCO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLHNCQUFRRixhQUFSLENBQWpCO0FBQ0EsVUFBSUcsaUJBQVFDLGNBQVosQ0FBMkIsQ0FBQ0MsVUFBRCxFQUFhQyxHQUFiLEtBQXFCO0FBQy9DYixRQUFBQSxRQUFRLENBQUNZLFVBQUQsRUFBYUMsR0FBYixDQUFSO0FBQ0EsT0FGRCxFQUVHQyxLQUZILENBRVNMLFFBRlQ7O0FBR0EsVUFBSTtBQUNIQSxRQUFBQSxRQUFRLENBQUNNLEdBQVQsQ0FBYSxDQUFDQyxHQUFELEVBQU1DLEtBQU4sS0FBZ0I7QUFDNUIsZ0JBQU1DLEdBQUcsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWEsU0FBYixDQUFaO0FBQ0EsZ0JBQU1DLFFBQVEsR0FBRyxxQ0FBc0JGLEdBQXRCLENBQWpCO0FBQ0EsZ0JBQU1HLFNBQVMsR0FBR0osS0FBSyxDQUFDSyxRQUFOLENBQWU7QUFDaENDLFlBQUFBLE1BQU0sRUFBRSxJQUR3QjtBQUVoQ0MsWUFBQUEsTUFBTSxFQUFFLElBRndCO0FBR2hDQyxZQUFBQSxNQUFNLEVBQUUsS0FId0I7QUFJaENDLFlBQUFBLFdBQVcsRUFBRSxLQUptQjtBQUtoQ0MsWUFBQUEsSUFBSSxFQUFFLEtBTDBCO0FBTWhDQyxZQUFBQSxPQUFPLEVBQUUsS0FOdUI7QUFPaENDLFlBQUFBLE9BQU8sRUFBRSxLQVB1QjtBQVFoQ0MsWUFBQUEsT0FBTyxFQUFFLEtBUnVCO0FBU2hDQyxZQUFBQSxPQUFPLEVBQUUsS0FUdUI7QUFVaENDLFlBQUFBLFFBQVEsRUFBRSxLQVZzQjtBQVdoQ0MsWUFBQUEsTUFBTSxFQUFFO0FBWHdCLFdBQWYsQ0FBbEI7O0FBY0EsY0FBSSxDQUFDYixRQUFRLENBQUNhLE1BQVQsQ0FBZ0JDLE1BQWpCLElBQTJCLENBQUNkLFFBQVEsQ0FBQ1ksUUFBVCxDQUFrQkUsTUFBbEQsRUFBMEQ7QUFDekQ7QUFDQWhDLFlBQUFBLE9BQU8sQ0FBQztBQUNQaUMsY0FBQUEsTUFBTSxFQUFFLFNBREQ7QUFFUEMsY0FBQUEsR0FBRyxFQUFFZjtBQUZFLGFBQUQsQ0FBUDtBQUlBOztBQUNELGNBQUlELFFBQVEsQ0FBQ2EsTUFBVCxDQUFnQkMsTUFBcEIsRUFBNEI7QUFDM0IvQixZQUFBQSxNQUFNLENBQUNpQixRQUFRLENBQUNhLE1BQVQsQ0FBZ0JJLElBQWhCLENBQXFCLE1BQXJCLENBQUQsQ0FBTjtBQUNBOztBQUNEbkMsVUFBQUEsT0FBTyxDQUFDO0FBQ1BpQyxZQUFBQSxNQUFNLEVBQUUsTUFERDtBQUVQQyxZQUFBQSxHQUFHLEVBQUVmLFNBRkU7QUFHUFcsWUFBQUEsUUFBUSxFQUFFWixRQUFRLENBQUNZO0FBSFosV0FBRCxDQUFQO0FBS0EsU0FoQ0Q7QUFpQ0EsT0FsQ0QsQ0FrQ0UsT0FBT00sQ0FBUCxFQUFVO0FBQ1hDLFFBQUFBLE9BQU8sQ0FBQ0gsR0FBUixDQUFZRSxDQUFaO0FBQ0FDLFFBQUFBLE9BQU8sQ0FBQ0gsR0FBUixDQUFZSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsQ0FBZixFQUFrQixJQUFsQixFQUF3QixDQUF4QixDQUFaO0FBQ0FuQyxRQUFBQSxNQUFNLENBQUNtQyxDQUFELENBQU47QUFDQTtBQUNELEtBbkRNLENBQVA7QUFvREE7O0FBdEVpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snO1xuXG5pbXBvcnQgeyBmb3JtYXRXZWJwYWNrTWVzc2FnZXMgfSBmcm9tICcuLi9kZXYtdXRpbHMnO1xuaW1wb3J0IHsgQ3JlYXRlV2VicGFja0NvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9DcmVhdGVXZWJwYWNrQ29uZmlnJztcbmltcG9ydCB7IFByb2plY3RDb25maWcgfSBmcm9tICcuLi9jb25maWcvcHJvamVjdC5jb25maWcuZGVmYXVsdCc7XG5pbXBvcnQgeyBzZXJ2ZXJDb25maWdEZWZhdWx0IH0gZnJvbSAnLi4vY29uZmlnL3NlcnZlci5jb25maWcuZGVmYXVsdCc7XG5cbi8qKlxuICogQ3JlYXRlIHByb2R1Y3Rpb24gcmVhZHkgZmlsZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWlsZCB7XG5cdHByaXZhdGUgcHJvamVjdENvbmZpZzogUHJvamVjdENvbmZpZztcblxuXHRwcml2YXRlIGN3ZDogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHByb2plY3RDb25maWc6IFByb2plY3RDb25maWcsIGN3ZDogc3RyaW5nKSB7XG5cdFx0dGhpcy5wcm9qZWN0Q29uZmlnID0gcHJvamVjdENvbmZpZztcblx0XHR0aGlzLmN3ZCA9IGN3ZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBCdWlsZCB0aGUgZmlsZXMuXG5cdCAqL1xuXHRwdWJsaWMgYnVpbGQocHJvZ3Jlc3M6IChwOiBudW1iZXIsIG06IHN0cmluZykgPT4gdm9pZCk6IFByb21pc2U8e1xuXHRcdHN0YXR1czogJ2Vycm9yJyB8ICd3YXJuJyB8ICdzdWNjZXNzJztcblx0XHRsb2c6IHN0cmluZztcblx0XHR3YXJuaW5ncz86IHN0cmluZ1tdO1xuXHR9PiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGNvbnN0IGNvbmZpZyA9IG5ldyBDcmVhdGVXZWJwYWNrQ29uZmlnKFxuXHRcdFx0XHR0aGlzLnByb2plY3RDb25maWcsXG5cdFx0XHRcdHNlcnZlckNvbmZpZ0RlZmF1bHQsXG5cdFx0XHRcdHRoaXMuY3dkLFxuXHRcdFx0XHRmYWxzZVxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IHdlYnBhY2tDb25maWcgPSBjb25maWcuZ2V0V2VicGFja0NvbmZpZygpIGFzIHdlYnBhY2suQ29uZmlndXJhdGlvbjtcblx0XHRcdGNvbnN0IGNvbXBpbGVyID0gd2VicGFjayh3ZWJwYWNrQ29uZmlnKTtcblx0XHRcdG5ldyB3ZWJwYWNrLlByb2dyZXNzUGx1Z2luKChwZXJjZW50YWdlLCBtc2cpID0+IHtcblx0XHRcdFx0cHJvZ3Jlc3MocGVyY2VudGFnZSwgbXNnKTtcblx0XHRcdH0pLmFwcGx5KGNvbXBpbGVyKTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBpbGVyLnJ1bigoZXJyLCBzdGF0cykgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHJhdyA9IHN0YXRzLnRvSnNvbigndmVyYm9zZScpO1xuXHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2VzID0gZm9ybWF0V2VicGFja01lc3NhZ2VzKHJhdyk7XG5cdFx0XHRcdFx0Y29uc3Qgb3V0cHV0TG9nID0gc3RhdHMudG9TdHJpbmcoe1xuXHRcdFx0XHRcdFx0Y29sb3JzOiB0cnVlLFxuXHRcdFx0XHRcdFx0YXNzZXRzOiB0cnVlLFxuXHRcdFx0XHRcdFx0Y2h1bmtzOiBmYWxzZSxcblx0XHRcdFx0XHRcdGVudHJ5cG9pbnRzOiBmYWxzZSxcblx0XHRcdFx0XHRcdGhhc2g6IGZhbHNlLFxuXHRcdFx0XHRcdFx0dmVyc2lvbjogZmFsc2UsXG5cdFx0XHRcdFx0XHRtb2R1bGVzOiBmYWxzZSxcblx0XHRcdFx0XHRcdGJ1aWx0QXQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0dGltaW5nczogZmFsc2UsXG5cdFx0XHRcdFx0XHR3YXJuaW5nczogZmFsc2UsXG5cdFx0XHRcdFx0XHRlcnJvcnM6IGZhbHNlLFxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0aWYgKCFtZXNzYWdlcy5lcnJvcnMubGVuZ3RoICYmICFtZXNzYWdlcy53YXJuaW5ncy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIEFsbCBnb29kXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiAnc3VjY2VzcycsXG5cdFx0XHRcdFx0XHRcdGxvZzogb3V0cHV0TG9nLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChtZXNzYWdlcy5lcnJvcnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QobWVzc2FnZXMuZXJyb3JzLmpvaW4oJ1xcblxcbicpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVzb2x2ZSh7XG5cdFx0XHRcdFx0XHRzdGF0dXM6ICd3YXJuJyxcblx0XHRcdFx0XHRcdGxvZzogb3V0cHV0TG9nLFxuXHRcdFx0XHRcdFx0d2FybmluZ3M6IG1lc3NhZ2VzLndhcm5pbmdzLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGUsIG51bGwsIDIpKTtcblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG4iXX0=