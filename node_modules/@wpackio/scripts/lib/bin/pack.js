"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pack = pack;

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _path = _interopRequireDefault(require("path"));

var _getProjectAndServerConfig = require("../config/getProjectAndServerConfig");

var _Pack = require("../scripts/Pack");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Start the `wpackio-scripts build` command.
 *
 * @param options Option as received from CLI.
 */
function pack(options) {
  // For spinner
  const spinText = `${_utils.wpackLogoSmall}: creating distributable zip file${_utils.watchEllipsis}`;
  const spinner = (0, _ora.default)({
    text: spinText,
    spinner: 'dots',
    color: 'yellow',
    discardStdin: false
  }); // Get project and server config JSONs.

  const cwd = (0, _utils.resolveCWD)(options);

  const relCwd = _path.default.relative(process.cwd(), cwd);

  console.log(`${_logSymbols.default.success} startup: ${_chalk.default.cyan(relCwd === '' ? '.' : relCwd)}`);

  try {
    const {
      projectConfig,
      projectConfigPath
    } = (0, _getProjectAndServerConfig.getProjectConfig)(cwd, options);
    console.log(`${_logSymbols.default.success} project config: ${_chalk.default.cyan(_path.default.relative(cwd, projectConfigPath))}`); // Start the webpack/browserSync server

    spinner.start();
    const packer = new _Pack.Pack(projectConfig, {
      onMkDirPackage: p => {
        spinner.succeed(`created directory ${_path.default.relative(cwd, p)}`);
        spinner.start(`cleaning up package directory`);
      },
      onClean: paths => {
        let sucText = `package directory is already clean`;

        if (paths.length) {
          sucText = `deleted ${paths.length} old files`;
        }

        spinner.succeed(sucText);
        spinner.start(`creating installable package directory`);
      },
      onMkDirSlug: p => {
        spinner.succeed(`created package directory ${_path.default.relative(cwd, p)}`);
        spinner.start(`copying files to installable package directory`);
      },
      onBeforeCopy: () => {
        spinner.text = (0, _utils.getFileCopyProgress)();
      },
      onCopyProgress: progress => {
        spinner.text = (0, _utils.getFileCopyProgress)(progress);
      },
      onCopy: () => {
        spinner.succeed();
      },
      onBeforeZip: () => {
        spinner.start((0, _utils.getZipProgress)());
      },
      onZipProgress: data => {
        spinner.text = (0, _utils.getZipProgress)(data);
      },
      onZip: result => {
        spinner.succeed();
        console.log('');
        (0, _utils.endPackInfo)(result);
        console.log('');
      }
    }, cwd);
    packer.pack();
  } catch (e) {
    spinner.stop();
    (0, _utils.prettyPrintError)(e, 'could not start webpack compiler.');
    process.exit(1);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vcGFjay50cyJdLCJuYW1lcyI6WyJwYWNrIiwib3B0aW9ucyIsInNwaW5UZXh0Iiwid3BhY2tMb2dvU21hbGwiLCJ3YXRjaEVsbGlwc2lzIiwic3Bpbm5lciIsInRleHQiLCJjb2xvciIsImRpc2NhcmRTdGRpbiIsImN3ZCIsInJlbEN3ZCIsInBhdGgiLCJyZWxhdGl2ZSIsInByb2Nlc3MiLCJjb25zb2xlIiwibG9nIiwibG9nU3ltYm9scyIsInN1Y2Nlc3MiLCJjaGFsayIsImN5YW4iLCJwcm9qZWN0Q29uZmlnIiwicHJvamVjdENvbmZpZ1BhdGgiLCJzdGFydCIsInBhY2tlciIsIlBhY2siLCJvbk1rRGlyUGFja2FnZSIsInAiLCJzdWNjZWVkIiwib25DbGVhbiIsInBhdGhzIiwic3VjVGV4dCIsImxlbmd0aCIsIm9uTWtEaXJTbHVnIiwib25CZWZvcmVDb3B5Iiwib25Db3B5UHJvZ3Jlc3MiLCJwcm9ncmVzcyIsIm9uQ29weSIsIm9uQmVmb3JlWmlwIiwib25aaXBQcm9ncmVzcyIsImRhdGEiLCJvblppcCIsInJlc3VsdCIsImUiLCJzdG9wIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLElBQVQsQ0FBY0MsT0FBZCxFQUF5RDtBQUMvRDtBQUNBLFFBQU1DLFFBQVEsR0FBSSxHQUFFQyxxQkFBZSxvQ0FBbUNDLG9CQUFjLEVBQXBGO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLGtCQUFJO0FBQ25CQyxJQUFBQSxJQUFJLEVBQUVKLFFBRGE7QUFFbkJHLElBQUFBLE9BQU8sRUFBRSxNQUZVO0FBR25CRSxJQUFBQSxLQUFLLEVBQUUsUUFIWTtBQUluQkMsSUFBQUEsWUFBWSxFQUFFO0FBSkssR0FBSixDQUFoQixDQUgrRCxDQVMvRDs7QUFDQSxRQUFNQyxHQUFHLEdBQUcsdUJBQVdSLE9BQVgs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T0FBTzBDLENBQVAsRUFBVTtBQUNYckMsSUFBQUEsT0FBTyxDQUFDc0MsSUFBUjtBQUNBLGlDQUFpQkQsQ0FBakIsRUFBb0IsbUNBQXBCO0FBQ0E3QixJQUFBQSxPQUFPLENBQUMrQixJQUFSLENBQWEsQ0FBYjtBQUNBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGxvZ1N5bWJvbHMgZnJvbSAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IG9yYSBmcm9tICdvcmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBnZXRQcm9qZWN0Q29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2dldFByb2plY3RBbmRTZXJ2ZXJDb25maWcnO1xuaW1wb3J0IHsgUGFjayB9IGZyb20gJy4uL3NjcmlwdHMvUGFjayc7XG5pbXBvcnQgeyBQcm9ncmFtT3B0aW9ucyB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHtcblx0ZW5kUGFja0luZm8sXG5cdGdldEZpbGVDb3B5UHJvZ3Jlc3MsXG5cdGdldFppcFByb2dyZXNzLFxuXHRwcmV0dHlQcmludEVycm9yLFxuXHRyZXNvbHZlQ1dELFxuXHR3YXRjaEVsbGlwc2lzLFxuXHR3cGFja0xvZ29TbWFsbCxcbn0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogU3RhcnQgdGhlIGB3cGFja2lvLXNjcmlwdHMgYnVpbGRgIGNvbW1hbmQuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uIGFzIHJlY2VpdmVkIGZyb20gQ0xJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFjayhvcHRpb25zOiBQcm9ncmFtT3B0aW9ucyB8IHVuZGVmaW5lZCk6IHZvaWQge1xuXHQvLyBGb3Igc3Bpbm5lclxuXHRjb25zdCBzcGluVGV4dCA9IGAke3dwYWNrTG9nb1NtYWxsfTogY3JlYXRpbmcgZGlzdHJpYnV0YWJsZSB6aXAgZmlsZSR7d2F0Y2hFbGxpcHNpc31gO1xuXHRjb25zdCBzcGlubmVyID0gb3JhKHtcblx0XHR0ZXh0OiBzcGluVGV4dCxcblx0XHRzcGlubmVyOiAnZG90cycsXG5cdFx0Y29sb3I6ICd5ZWxsb3cnLFxuXHRcdGRpc2NhcmRTdGRpbjogZmFsc2UsXG5cdH0pO1xuXHQvLyBHZXQgcHJvamVjdCBhbmQgc2VydmVyIGNvbmZpZyBKU09Ocy5cblx0Y29uc3QgY3dkID0gcmVzb2x2ZUNXRChvcHRpb25zKTtcblx0Y29uc3QgcmVsQ3dkID0gcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBjd2QpO1xuXHRjb25zb2xlLmxvZyhcblx0XHRgJHtsb2dTeW1ib2xzLnN1Y2Nlc3N9IHN0YXJ0dXA6ICR7Y2hhbGsuY3lhbihyZWxDd2QgPT09ICcnID8gJy4nIDogcmVsQ3dkKX1gXG5cdCk7XG5cdHRyeSB7XG5cdFx0Y29uc3QgeyBwcm9qZWN0Q29uZmlnLCBwcm9qZWN0Q29uZmlnUGF0aCB9ID0gZ2V0UHJvamVjdENvbmZpZyhjd2QsIG9wdGlvbnMpO1xuXHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0YCR7bG9nU3ltYm9scy5zdWNjZXNzfSBwcm9qZWN0IGNvbmZpZzogJHtjaGFsay5jeWFuKFxuXHRcdFx0XHRwYXRoLnJlbGF0aXZlKGN3ZCwgcHJvamVjdENvbmZpZ1BhdGgpXG5cdFx0XHQpfWBcblx0XHQpO1xuXHRcdC8vIFN0YXJ0IHRoZSB3ZWJwYWNrL2Jyb3dzZXJTeW5jIHNlcnZlclxuXHRcdHNwaW5uZXIuc3RhcnQoKTtcblx0XHRjb25zdCBwYWNrZXIgPSBuZXcgUGFjayhcblx0XHRcdHByb2plY3RDb25maWcsXG5cdFx0XHR7XG5cdFx0XHRcdG9uTWtEaXJQYWNrYWdlOiBwID0+IHtcblx0XHRcdFx0XHRzcGlubmVyLnN1Y2NlZWQoYGNyZWF0ZWQgZGlyZWN0b3J5ICR7cGF0aC5yZWxhdGl2ZShjd2QsIHApfWApO1xuXHRcdFx0XHRcdHNwaW5uZXIuc3RhcnQoYGNsZWFuaW5nIHVwIHBhY2thZ2UgZGlyZWN0b3J5YCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9uQ2xlYW46IHBhdGhzID0+IHtcblx0XHRcdFx0XHRsZXQgc3VjVGV4dCA9IGBwYWNrYWdlIGRpcmVjdG9yeSBpcyBhbHJlYWR5IGNsZWFuYDtcblx0XHRcdFx0XHRpZiAocGF0aHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRzdWNUZXh0ID0gYGRlbGV0ZWQgJHtwYXRocy5sZW5ndGh9IG9sZCBmaWxlc2A7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNwaW5uZXIuc3VjY2VlZChzdWNUZXh0KTtcblx0XHRcdFx0XHRzcGlubmVyLnN0YXJ0KGBjcmVhdGluZyBpbnN0YWxsYWJsZSBwYWNrYWdlIGRpcmVjdG9yeWApO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbk1rRGlyU2x1ZzogcCA9PiB7XG5cdFx0XHRcdFx0c3Bpbm5lci5zdWNjZWVkKGBjcmVhdGVkIHBhY2thZ2UgZGlyZWN0b3J5ICR7cGF0aC5yZWxhdGl2ZShjd2QsIHApfWApO1xuXHRcdFx0XHRcdHNwaW5uZXIuc3RhcnQoYGNvcHlpbmcgZmlsZXMgdG8gaW5zdGFsbGFibGUgcGFja2FnZSBkaXJlY3RvcnlgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0b25CZWZvcmVDb3B5OiAoKSA9PiB7XG5cdFx0XHRcdFx0c3Bpbm5lci50ZXh0ID0gZ2V0RmlsZUNvcHlQcm9ncmVzcygpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkNvcHlQcm9ncmVzczogcHJvZ3Jlc3MgPT4ge1xuXHRcdFx0XHRcdHNwaW5uZXIudGV4dCA9IGdldEZpbGVDb3B5UHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkNvcHk6ICgpID0+IHtcblx0XHRcdFx0XHRzcGlubmVyLnN1Y2NlZWQoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0b25CZWZvcmVaaXA6ICgpID0+IHtcblx0XHRcdFx0XHRzcGlubmVyLnN0YXJ0KGdldFppcFByb2dyZXNzKCkpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvblppcFByb2dyZXNzOiBkYXRhID0+IHtcblx0XHRcdFx0XHRzcGlubmVyLnRleHQgPSBnZXRaaXBQcm9ncmVzcyhkYXRhKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0b25aaXA6IHJlc3VsdCA9PiB7XG5cdFx0XHRcdFx0c3Bpbm5lci5zdWNjZWVkKCk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJycpO1xuXHRcdFx0XHRcdGVuZFBhY2tJbmZvKHJlc3VsdCk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJycpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdGN3ZFxuXHRcdCk7XG5cdFx0cGFja2VyLnBhY2soKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHNwaW5uZXIuc3RvcCgpO1xuXHRcdHByZXR0eVByaW50RXJyb3IoZSwgJ2NvdWxkIG5vdCBzdGFydCB3ZWJwYWNrIGNvbXBpbGVyLicpO1xuXHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0fVxufVxuIl19