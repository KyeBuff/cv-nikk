"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _path = _interopRequireDefault(require("path"));

var _getProjectAndServerConfig = require("../config/getProjectAndServerConfig");

var _Build = require("../scripts/Build");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Start the `wpackio-scripts build` command.
 *
 * @param options Option as received from CLI.
 */
function build(options) {
  // For spinner
  const spinner = (0, _ora.default)({
    text: `${_utils.wpackLogoSmall}: creating production builds${_utils.watchEllipsis}`,
    spinner: 'dots',
    color: 'yellow',
    discardStdin: false
  }); // Set process.env.NODE_ENV to production

  process.env.NODE_ENV = 'production'; // Set process.env.BABEL_ENV to production

  process.env.BABEL_ENV = 'production'; // Get project and server config JSONs.

  const cwd = (0, _utils.resolveCWD)(options);

  const relCwd = _path.default.relative(process.cwd(), cwd);

  console.log(`${_logSymbols.default.success} startup: ${_chalk.default.cyan(relCwd === '' ? '.' : relCwd)}`);

  try {
    const {
      projectConfig,
      projectConfigPath
    } = (0, _getProjectAndServerConfig.getProjectConfig)(cwd, options);
    console.log(`${_logSymbols.default.success} project config: ${_chalk.default.cyan(_path.default.relative(cwd, projectConfigPath))}`); // Start the build process

    spinner.start();
    const builder = new _Build.Build(projectConfig, cwd);
    builder.build((p, m) => {
      spinner.text = `${(0, _utils.getProgressBar)(p * 100)} ${_chalk.default.dim(m)}`;
    }).then(({
      status,
      log,
      warnings
    }) => {
      if (status === 'success') {
        spinner.succeed(`${_utils.wpackLogoSmall} build successful.`);
      } else {
        spinner.warn(`${_utils.wpackLogoSmall} built with warnings.`);
      }

      (0, _utils.printSuccessHeading)('OUTPUT');
      console.log(log);
      console.log('');

      if (status === 'warn' && Array.isArray(warnings)) {
        (0, _utils.printWarningHeading)('WARNINGS');
        warnings.forEach(w => {
          console.log(w);
          console.log('');
        });
      }

      (0, _utils.endBuildInfo)();
      console.log('');
      process.exit(0);
    }).catch(err => {
      spinner.fail(`${_utils.wpackLogoSmall} build failed.`);
      (0, _utils.printErrorHeading)('ERROR');
      console.error(err);
      console.log('');
      process.exit(1);
    });
  } catch (e) {
    spinner.stop();
    (0, _utils.prettyPrintError)(e, 'could not start webpack compiler.');
    process.exit(1);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vYnVpbGQudHMiXSwibmFtZXMiOlsiYnVpbGQiLCJvcHRpb25zIiwic3Bpbm5lciIsInRleHQiLCJ3cGFja0xvZ29TbWFsbCIsIndhdGNoRWxsaXBzaXMiLCJjb2xvciIsImRpc2NhcmRTdGRpbiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkJBQkVMX0VOViIsImN3ZCIsInJlbEN3ZCIsInBhdGgiLCJyZWxhdGl2ZSIsImNvbnNvbGUiLCJsb2ciLCJsb2dTeW1ib2xzIiwic3VjY2VzcyIsImNoYWxrIiwiY3lhbiIsInByb2plY3RDb25maWciLCJwcm9qZWN0Q29uZmlnUGF0aCIsInN0YXJ0IiwiYnVpbGRlciIsIkJ1aWxkIiwicCIsIm0iLCJkaW0iLCJ0aGVuIiwic3RhdHVzIiwid2FybmluZ3MiLCJzdWNjZWVkIiwid2FybiIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJ3IiwiZXhpdCIsImNhdGNoIiwiZXJyIiwiZmFpbCIsImVycm9yIiwiZSIsInN0b3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxLQUFULENBQWVDLE9BQWYsRUFBMEQ7QUFDaEU7QUFDQSxRQUFNQyxPQUFPLEdBQUcsa0JBQUk7QUFDbkJDLElBQUFBLElBQUksRUFBRyxHQUFFQyxxQkFBZSwrQkFBOEJDLG9CQUFjLEVBRGpEO0FBRW5CSCxJQUFBQSxPQUFPLEVBQUUsTUFGVTtBQUduQkksSUFBQUEsS0FBSyxFQUFFLFFBSFk7QUFJbkJDLElBQUFBLFlBQVksRUFBRTtBQUpLLEdBQUosQ0FBaEIsQ0FGZ0UsQ0FRaEU7O0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEdBQXVCLFlBQXZCLENBVGdFLENBVWhFOztBQUNBRixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsU0FBWixHQUF3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QUFSLENBQWEsQ0FBYjtBQUNBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGxvZ1N5bWJvbHMgZnJvbSAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IG9yYSBmcm9tICdvcmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBnZXRQcm9qZWN0Q29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2dldFByb2plY3RBbmRTZXJ2ZXJDb25maWcnO1xuaW1wb3J0IHsgQnVpbGQgfSBmcm9tICcuLi9zY3JpcHRzL0J1aWxkJztcbmltcG9ydCB7IFByb2dyYW1PcHRpb25zIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQge1xuXHRlbmRCdWlsZEluZm8sXG5cdHByZXR0eVByaW50RXJyb3IsXG5cdHJlc29sdmVDV0QsXG5cdHdhdGNoRWxsaXBzaXMsXG5cdHdwYWNrTG9nb1NtYWxsLFxuXHRwcmludEVycm9ySGVhZGluZyxcblx0cHJpbnRTdWNjZXNzSGVhZGluZyxcblx0cHJpbnRXYXJuaW5nSGVhZGluZyxcblx0Z2V0UHJvZ3Jlc3NCYXIsXG59IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIFN0YXJ0IHRoZSBgd3BhY2tpby1zY3JpcHRzIGJ1aWxkYCBjb21tYW5kLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbiBhcyByZWNlaXZlZCBmcm9tIENMSS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkKG9wdGlvbnM6IFByb2dyYW1PcHRpb25zIHwgdW5kZWZpbmVkKTogdm9pZCB7XG5cdC8vIEZvciBzcGlubmVyXG5cdGNvbnN0IHNwaW5uZXIgPSBvcmEoe1xuXHRcdHRleHQ6IGAke3dwYWNrTG9nb1NtYWxsfTogY3JlYXRpbmcgcHJvZHVjdGlvbiBidWlsZHMke3dhdGNoRWxsaXBzaXN9YCxcblx0XHRzcGlubmVyOiAnZG90cycsXG5cdFx0Y29sb3I6ICd5ZWxsb3cnLFxuXHRcdGRpc2NhcmRTdGRpbjogZmFsc2UsXG5cdH0pO1xuXHQvLyBTZXQgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgdG8gcHJvZHVjdGlvblxuXHRwcm9jZXNzLmVudi5OT0RFX0VOViA9ICdwcm9kdWN0aW9uJztcblx0Ly8gU2V0IHByb2Nlc3MuZW52LkJBQkVMX0VOViB0byBwcm9kdWN0aW9uXG5cdHByb2Nlc3MuZW52LkJBQkVMX0VOViA9ICdwcm9kdWN0aW9uJztcblx0Ly8gR2V0IHByb2plY3QgYW5kIHNlcnZlciBjb25maWcgSlNPTnMuXG5cdGNvbnN0IGN3ZCA9IHJlc29sdmVDV0Qob3B0aW9ucyk7XG5cdGNvbnN0IHJlbEN3ZCA9IHBhdGgucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSwgY3dkKTtcblx0Y29uc29sZS5sb2coXG5cdFx0YCR7bG9nU3ltYm9scy5zdWNjZXNzfSBzdGFydHVwOiAke2NoYWxrLmN5YW4ocmVsQ3dkID09PSAnJyA/ICcuJyA6IHJlbEN3ZCl9YFxuXHQpO1xuXHR0cnkge1xuXHRcdGNvbnN0IHsgcHJvamVjdENvbmZpZywgcHJvamVjdENvbmZpZ1BhdGggfSA9IGdldFByb2plY3RDb25maWcoY3dkLCBvcHRpb25zKTtcblx0XHRjb25zb2xlLmxvZyhcblx0XHRcdGAke2xvZ1N5bWJvbHMuc3VjY2Vzc30gcHJvamVjdCBjb25maWc6ICR7Y2hhbGsuY3lhbihcblx0XHRcdFx0cGF0aC5yZWxhdGl2ZShjd2QsIHByb2plY3RDb25maWdQYXRoKVxuXHRcdFx0KX1gXG5cdFx0KTtcblx0XHQvLyBTdGFydCB0aGUgYnVpbGQgcHJvY2Vzc1xuXHRcdHNwaW5uZXIuc3RhcnQoKTtcblx0XHRjb25zdCBidWlsZGVyOiBCdWlsZCA9IG5ldyBCdWlsZChwcm9qZWN0Q29uZmlnLCBjd2QpO1xuXHRcdGJ1aWxkZXJcblx0XHRcdC5idWlsZCgocCwgbSkgPT4ge1xuXHRcdFx0XHRzcGlubmVyLnRleHQgPSBgJHtnZXRQcm9ncmVzc0JhcihwICogMTAwKX0gJHtjaGFsay5kaW0obSl9YDtcblx0XHRcdH0pXG5cdFx0XHQudGhlbigoeyBzdGF0dXMsIGxvZywgd2FybmluZ3MgfSkgPT4ge1xuXHRcdFx0XHRpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHtcblx0XHRcdFx0XHRzcGlubmVyLnN1Y2NlZWQoYCR7d3BhY2tMb2dvU21hbGx9IGJ1aWxkIHN1Y2Nlc3NmdWwuYCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3Bpbm5lci53YXJuKGAke3dwYWNrTG9nb1NtYWxsfSBidWlsdCB3aXRoIHdhcm5pbmdzLmApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHByaW50U3VjY2Vzc0hlYWRpbmcoJ09VVFBVVCcpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhsb2cpO1xuXHRcdFx0XHRjb25zb2xlLmxvZygnJyk7XG5cdFx0XHRcdGlmIChzdGF0dXMgPT09ICd3YXJuJyAmJiBBcnJheS5pc0FycmF5KHdhcm5pbmdzKSkge1xuXHRcdFx0XHRcdHByaW50V2FybmluZ0hlYWRpbmcoJ1dBUk5JTkdTJyk7XG5cdFx0XHRcdFx0d2FybmluZ3MuZm9yRWFjaCh3ID0+IHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHcpO1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJycpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVuZEJ1aWxkSW5mbygpO1xuXHRcdFx0XHRjb25zb2xlLmxvZygnJyk7XG5cdFx0XHRcdHByb2Nlc3MuZXhpdCgwKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZXJyID0+IHtcblx0XHRcdFx0c3Bpbm5lci5mYWlsKGAke3dwYWNrTG9nb1NtYWxsfSBidWlsZCBmYWlsZWQuYCk7XG5cdFx0XHRcdHByaW50RXJyb3JIZWFkaW5nKCdFUlJPUicpO1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCcnKTtcblx0XHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXHRcdFx0fSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRzcGlubmVyLnN0b3AoKTtcblx0XHRwcmV0dHlQcmludEVycm9yKGUsICdjb3VsZCBub3Qgc3RhcnQgd2VicGFjayBjb21waWxlci4nKTtcblx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdH1cbn1cbiJdfQ==