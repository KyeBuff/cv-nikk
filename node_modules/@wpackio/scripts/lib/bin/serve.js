"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serve = serve;

var _chalk = _interopRequireDefault(require("chalk"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _path = _interopRequireDefault(require("path"));

var _getProjectAndServerConfig = require("../config/getProjectAndServerConfig");

var _Server = require("../scripts/Server");

var _utils = require("./utils");

var _devUtils = require("../dev-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-lonely-if */

/* eslint-disable @typescript-eslint/no-var-requires */

/**
 * Start the `wpackio-scripts serve` command.
 *
 * @param options Options as received from CLI.
 */
function serve(options) {
  // Set process.env.NODE_ENV to development
  process.env.NODE_ENV = 'development'; // Set process.env.BABEL_ENV to development

  process.env.BABEL_ENV = 'development'; // Get project and server config JSONs.

  const cwd = (0, _utils.resolveCWD)(options);

  const relCwd = _path.default.relative(process.cwd(), cwd); // For spinner


  const spinner = (0, _ora.default)({
    text: `starting ${_utils.wpackLogoSmall} development server`,
    spinner: 'dots',
    color: 'yellow',
    discardStdin: false
  });
  console.log(`${_logSymbols.default.success} ${_chalk.default.bold('startup')}: ${_chalk.default.cyan(relCwd === '' ? '.' : relCwd)}`);

  try {
    const {
      projectConfig,
      serverConfig,
      projectConfigPath,
      serverConfigPath
    } = (0, _getProjectAndServerConfig.getProjectAndServerConfig)(cwd, options);
    console.log(`${_logSymbols.default.success} ${_chalk.default.bold('project config')}: ${_chalk.default.cyan(_path.default.relative(cwd, projectConfigPath))}`);
    console.log(`${_logSymbols.default.success} ${_chalk.default.bold('server config')}: ${_chalk.default.cyan(_path.default.relative(cwd, serverConfigPath))}`);
    let entries = [];

    if (options !== null && options !== void 0 && options.entries) {
      console.log(`${_logSymbols.default.info} ${_chalk.default.bold('cli')}: ${_chalk.default.cyan(`starting with selective ${options.entries.length} ${options.entries.length === 1 ? 'entry' : 'entries'}`)}`); // make sure to remove duplicates from the entries before looping

      entries = [...new Set(options.entries)].map(e => {
        let entry = Number.parseInt(e, 10);

        if (Number.isNaN(entry)) {
          entry = projectConfig.files.findIndex(file => file.name === e);

          if (entry === -1) {
            console.log(`${_logSymbols.default.error} ${_chalk.default.bold('cli')}: ${_chalk.default.red(`no entry found for `)}${_chalk.default.bold(_chalk.default.yellow(e))} ${_chalk.default.bold('skipping...')}`);
            return false;
          }

          console.log(`${_logSymbols.default.success} ${_chalk.default.bold('cli')}: ${_chalk.default.green(`entry found for `)}${_chalk.default.bold(_chalk.default.yellow(e))}`);
        } else {
          if (projectConfig.files[entry]) {
            console.log(`${_logSymbols.default.success} ${_chalk.default.bold('cli')}: ${_chalk.default.green(`entry found for ${_chalk.default.bold(e)} is`)} ${_chalk.default.bold(_chalk.default.yellow(projectConfig.files[entry].name))}`);
          } else {
            console.log(`${_logSymbols.default.error} ${_chalk.default.bold('cli')}: ${_chalk.default.red(`no entry found for `)}${_chalk.default.bold(_chalk.default.yellow(e))} ${_chalk.default.bold('skipping...')}`);
            return false;
          }
        }

        return entry;
      }).filter(entry => typeof entry === 'number');
    } else if (projectConfig.files.length > 1) {
      (0, _utils.serveEntryInfo)();
    }

    spinner.start();
    let lastWebpackStat = null; // Start the webpack/browserSync server

    const server = new _Server.Server(projectConfig, serverConfig, cwd, {
      // tslint:disable:no-empty
      invalid: () => {
        (0, _utils.printCompilingMessage)();
      },
      done: () => {
        (0, _utils.printSuccessfullyCompiledMessage)();
      },

      onWatching() {
        (0, _utils.printWatchingMessage)();
      },

      onError: msg => {
        (0, _utils.printErrorHeading)('ERROR');
        msg.errors.forEach(e => {
          console.log(e);
          console.log('');
        });
        (0, _utils.printFailedCompileMEssage)();
      },
      onWarn: msg => {
        (0, _utils.printWarningHeading)('WARNING');
        msg.warnings.forEach(e => {
          console.log(e);
          console.log('');
        });
        (0, _utils.printCompiledWithWarnMessage)();
      },
      onEmit: stats => {
        (0, _utils.printCompileTimeMessages)(stats, lastWebpackStat);
        lastWebpackStat = stats.toJson(_utils.webpackStatToJsonOptions);
      },
      firstCompile: stats => {
        spinner.stop();

        if (!stats) {
          (0, _utils.printSuccessfullyCompiledMessage)();
          return;
        }

        const raw = stats.toJson('verbose');
        const messages = (0, _devUtils.formatWebpackMessages)(raw);
        console.log('');
        (0, _utils.serverInfo)(server.getServerUrl(), server.getBsUiUrl());
        console.log('');

        if (stats.hasErrors()) {
          (0, _utils.printErrorHeading)('ERROR');
          messages.errors.forEach(e => {
            console.log(e);
            console.log('');
          });
          (0, _utils.printFailedCompileMEssage)();
        } else if (stats.hasWarnings()) {
          (0, _utils.printWarningHeading)('WARNING');
          messages.warnings.forEach(e => {
            console.log(e);
            console.log('');
          });
          (0, _utils.printCompiledWithWarnMessage)();
        } else {
          (0, _utils.printSuccessfullyCompiledMessage)();
        }

        (0, _utils.printCompileTimeMessages)(stats, lastWebpackStat);
        lastWebpackStat = stats.toJson(_utils.webpackStatToJsonOptions);
      },

      onBsChange(file) {
        (0, _utils.printGeneralInfoMessage)(`changed: ${_chalk.default.bold(file)}`);
        (0, _utils.printGeneralInfoMessage)('reloading browser');
      },

      onTcStart(name) {
        const msg = `${name ? `[${_chalk.default.green(name)}] ` : ''}waiting for typecheck results...`;
        (0, _utils.printGeneralInfoMessage)(msg);
      },

      onInfo(msg, symbol) {
        (0, _utils.printGeneralInfoMessage)(msg, symbol);
      },

      onTcEnd(messages) {
        const name = messages.name;

        if (messages.errors.length || messages.warnings.length) {
          if (messages.errors.length) {
            (0, _utils.printErrorHeading)(`${name ? `[${name}] ` : ''}TS ERROR`);
            messages.errors.forEach(e => {
              console.log(e);
              console.log('');
            });
          }

          if (messages.warnings.length) {
            (0, _utils.printWarningHeading)(`${name ? `[${name}] ` : ''}TS WARNING`);
            messages.warnings.forEach(e => {
              console.log(e);
              console.log('');
            });
          }
        } else {
          const msg = `${name ? `[${_chalk.default.green(name)}] ` : ''}no typecheck errors`;
          (0, _utils.printGeneralInfoMessage)(msg, _logSymbols.default.success);
        }
      }

    }, entries);
    server.serve();

    const stopServer = () => {
      console.log((0, _utils.addTimeStampToLog)(`${_logSymbols.default.warning} shutting down development server`));
      server.stop();
      console.log('');
      (0, _utils.endServeInfo)();
      console.log('');
      process.exit(0);
    }; // Listen for `r`


    if (process.stdin.setRawMode) {
      process.stdin.setRawMode(true);
      const {
        stdin
      } = process;
      stdin.setEncoding('utf8');
      stdin.on('data', key => {
        // ctrl-c ( end of text )
        // or if pressing q, then stop
        // then stop server
        if (key === '\u0003' || key === 'q') {
          stopServer();
        } // If pressing r, then just refresh


        if (key.indexOf('r') === 0) {
          (0, _utils.printCompilingMessage)();
          server.refresh();
        }
      });
    } else {
      // Listen for SIGINT and quit properly
      process.on('SIGINT', () => {
        stopServer();
      });
    }
  } catch (e) {
    spinner.stop();
    (0, _utils.prettyPrintError)(e, 'could not start server.');
    process.exit(1);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,