"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addTimeStampToLog = addTimeStampToLog;
exports.printWatchingMessage = printWatchingMessage;
exports.printCompilingMessage = printCompilingMessage;
exports.printCompileTimeMessage = printCompileTimeMessage;
exports.printCompileTimeMessages = printCompileTimeMessages;
exports.printSuccessfullyCompiledMessage = printSuccessfullyCompiledMessage;
exports.printCompiledWithWarnMessage = printCompiledWithWarnMessage;
exports.printFailedCompileMEssage = printFailedCompileMEssage;
exports.printGeneralInfoMessage = printGeneralInfoMessage;
exports.printErrorHeading = printErrorHeading;
exports.printWarningHeading = printWarningHeading;
exports.printSuccessHeading = printSuccessHeading;
exports.isYarn = isYarn;
exports.printIntro = printIntro;
exports.resolveCWD = resolveCWD;
exports.serverInfo = serverInfo;
exports.serveEntryInfo = serveEntryInfo;
exports.endServeInfo = endServeInfo;
exports.endBuildInfo = endBuildInfo;
exports.endBootstrapInfo = endBootstrapInfo;
exports.prettyPrintError = prettyPrintError;
exports.getProgressBar = getProgressBar;
exports.getFileCopyProgress = getFileCopyProgress;
exports.getZipProgress = getZipProgress;
exports.endPackInfo = endPackInfo;
exports.entriesHelp = exports.contextHelp = exports.wpackIntro = exports.wpackLink = exports.webpackStatToJsonOptions = exports.watchEllipsis = exports.watchSymbol = exports.donationSentence = exports.wpackLogoSmall = exports.wpackLogo = exports.donationLink = exports.bulletSymbol = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _figures = _interopRequireDefault(require("figures"));

var _findUp = _interopRequireDefault(require("find-up"));

var _gradientString = _interopRequireDefault(require("gradient-string"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _path = _interopRequireDefault(require("path"));

var _prettyError = _interopRequireDefault(require("pretty-error"));

var _WpackioError = require("../errors/WpackioError");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pkgPath = _path.default.resolve(__dirname, '../../package.json'); // eslint-disable-next-line @typescript-eslint/no-var-requires


const pkg = require(pkgPath);

const bulletSymbol = _chalk.default.magenta(_figures.default.pointer);

exports.bulletSymbol = bulletSymbol;
const donationLink = `
    ${bulletSymbol} PATREON: ${_chalk.default.bold.blue.underline('https://www.patreon.com/swashata')}
    ${bulletSymbol} OPENCOLLECTIVE: ${_chalk.default.bold.blue.underline('https://opencollective.com/wpackio')}
`;
exports.donationLink = donationLink;
let isYarnCache = null;
const wpackLogo = `${_chalk.default.bold(_gradientString.default.instagram(`__      __`))}
${_chalk.default.bold(_gradientString.default.instagram(`\\ \\ /\\ / /`))} ${_chalk.default.bold(_gradientString.default.instagram('PACK.IO'))}
${_chalk.default.bold(_gradientString.default.instagram(` \\ V  V /`))}  ${_chalk.default.bold.yellowBright('JavaScript')} tooling for ${_chalk.default.bold.blueBright('WordPress')}
${_chalk.default.bold(_gradientString.default.instagram(`  \\_/\\_/`))}   ${_chalk.default.magenta('v')}${_chalk.default.bold.magenta(`${pkg.version}`)}`;
exports.wpackLogo = wpackLogo;

const wpackLogoSmall = _gradientString.default.instagram('wpack.io');

exports.wpackLogoSmall = wpackLogoSmall;
const donationSentence = `If ${wpackLogoSmall} is worthy, 🙏 consider donating.
${donationLink}
Every amount counts.`;
exports.donationSentence = donationSentence;

function addTimeStampToLog(log) {
  const time = new Date().toTimeString().split(' ')[0];
  return `${_chalk.default.dim(`｢${wpackLogoSmall} ${time}｣`)} ${log}`;
}

const watchSymbol = `${_logSymbols.default.info}`;
exports.watchSymbol = watchSymbol;

const watchEllipsis = _chalk.default.dim(_figures.default.ellipsis);

exports.watchEllipsis = watchEllipsis;

function printWatchingMessage() {
  console.log(addTimeStampToLog(`${watchSymbol} watching for changes${watchEllipsis}`));
}

function printCompilingMessage() {
  console.log(addTimeStampToLog(`${_logSymbols.default.info} compiling changes${watchEllipsis}`));
}

function printCompileTimeMessage(stat, lastStat) {
  // safety
  if (!stat || typeof stat !== 'object' || !stat.builtAt) {
    return;
  }

  if (lastStat === null || typeof lastStat !== 'object' || !lastStat.builtAt || stat.builtAt !== lastStat.builtAt) {
    // get bundle name
    let name = '';

    if (stat.name) {
      const entryName = stat.name;
      name = _chalk.default.green(entryName);

      if (stat.errors.length) {
        name = _chalk.default.red(entryName);
      } else if (stat.warnings.length) {
        name = _chalk.default.yellow(entryName);
      }

      name = `[${name}] `;
    } // get log symbol


    let symbol = _logSymbols.default.success;

    if (stat.errors.length) {
      symbol = _logSymbols.default.error;
    } else if (stat.warnings.length) {
      symbol = _logSymbols.default.warning;
    } // get log message


    let msg = 'was rebuilt in';

    if (lastStat === null) {
      msg = 'was built in';
    }

    console.log(addTimeStampToLog(`${symbol} ${name}bundle ${msg} ${_chalk.default.magenta(`${stat.time}ms`)}.`));
  }
}

const webpackStatToJsonOptions = {
  timings: true,
  assets: false,
  builtAt: true,
  cached: false,
  cachedAssets: false,
  children: true,
  chunkModules: false,
  chunkOrigins: false,
  chunks: false,
  entrypoints: false,
  env: false,
  errors: true,
  warnings: true,
  modules: false,
  publicPath: false,
  depth: false
};
exports.webpackStatToJsonOptions = webpackStatToJsonOptions;

function printCompileTimeMessages(stats, lastStatsJson) {
  let statsJson = null;

  if (stats) {
    statsJson = stats.toJson(webpackStatToJsonOptions);
  }

  if (statsJson !== null && !statsJson.time && statsJson.children && Array.isArray(statsJson.children)) {
    // if it is multicompiler
    statsJson.children.forEach((sj, index) => {
      if (lastStatsJson === null) {
        printCompileTimeMessage(sj, null);
      } else if (lastStatsJson !== null && lastStatsJson.children && Array.isArray(lastStatsJson.children)) {
        printCompileTimeMessage(sj, lastStatsJson.children[index]);
      }
    });
  } else if (statsJson.time) {
    // if it is single compiler
    if (lastStatsJson === null) {
      printCompileTimeMessage(statsJson, null);
    } else {
      printCompileTimeMessage(statsJson, lastStatsJson);
    }
  }
}

function printSuccessfullyCompiledMessage() {
  console.log(addTimeStampToLog(`${_logSymbols.default.success} compiled successfully`));
}

function printCompiledWithWarnMessage() {
  console.log(addTimeStampToLog(`${_logSymbols.default.warning} ${_chalk.default.dim('compiled with warnings...')}`));
}

function printFailedCompileMEssage() {
  console.error(addTimeStampToLog(`${_logSymbols.default.error} ${_chalk.default.dim('failed to compile')}`));
}

function printGeneralInfoMessage(msg, symbol) {
  if (typeof symbol === 'undefined') {
    // eslint-disable-next-line no-param-reassign
    symbol = _logSymbols.default.info;
  }

  console.info(addTimeStampToLog(`${symbol} ${msg}`));
}

function printErrorHeading(msg = 'ERROR') {
  console.log('');
  console.log(`${_chalk.default.bgRed.black(` ${msg} `)} please review`);
  console.log('');
}

function printWarningHeading(msg = 'WARNING') {
  console.log('');
  console.log(`${_chalk.default.bgYellow.black(` ${msg} `)} please review`);
  console.log('');
}

function printSuccessHeading(msg = 'OUTPUT') {
  console.log('');
  console.log(`${_chalk.default.bgGreenBright(_chalk.default.bold.hex('#000000')(` ${msg} `))}`);
  console.log('');
}

const wpackLink = `${_chalk.default.blue.underline('https://wpack.io')}`;
exports.wpackLink = wpackLink;
const wpackIntro = `${wpackLogo}\n`;
exports.wpackIntro = wpackIntro;

function isYarn() {
  const cwd = process.cwd();

  if (isYarnCache !== null) {
    return isYarnCache;
  }

  try {
    isYarnCache = _findUp.default.sync('yarn.lock', {
      cwd
    }) != null;
    return isYarnCache;
  } catch (_) {
    isYarnCache = false;
    return isYarnCache;
  }
}

const contextHelp = `Path to context or project root directory. Defaults to current working directory. It is recommended to use absolute path, else it is calculated from current working directory. The path you mention here should be what the URL 'localhost/wp-content/<themes|plugins>/<slug>/' map to. In most cases, you should leave it, because calling the program from npm or yarn script should automatically set it.`;
exports.contextHelp = contextHelp;
const entriesHelp = `Select entries from wpackio.project.js file for which we start the server. Either 0 based index of the entry, like \`-e 0 2\` will start the 0th and 2nd entry of wpackio project. You can also supply the name of the entries, like \`-e app admin\`. The tool will search wpackio for entries with name set to app and admin. If found, it will start them.`;
exports.entriesHelp = entriesHelp;

function printIntro() {
  console.log(wpackIntro);
}
/**
 * Resolve `cwd`, a.k.a, current working directory or context from user input.
 * It takes into account the `--context [path]` option from CLI and uses process
 * cwd, if not provided.
 *
 * @param options Options as received from CLI
 */


function resolveCWD(options) {
  let cwd = process.cwd(); // If user has provided cwd, then use that instead

  if (options && options.context) {
    const {
      context
    } = options;

    if (_path.default.isAbsolute(options.context)) {
      cwd = context;
    } else {
      cwd = _path.default.resolve(cwd, context);
    }
  }

  return cwd;
}

function serverInfo(url, uiUrl) {
  const msg = `${_logSymbols.default.success} ${wpackLogoSmall} server is running at.

    ${bulletSymbol} ${_chalk.default.blue.underline(url)}

and BrowserSync UI running at

    ${bulletSymbol} ${typeof uiUrl === 'string' ? _chalk.default.blue.underline(uiUrl) : _chalk.default.red('N/A')}

Press ${_chalk.default.yellow('r')} to recompile and ${_chalk.default.yellow('q')} to force quit.
To create production build, run

    ${bulletSymbol} ${_chalk.default.yellow(isYarn() ? 'yarn build' : 'npm run build')}

${_chalk.default.dim('No files are written on disk during development mode.')}`;
  console.log(msg);
}

function serveEntryInfo() {
  const msg = `${_logSymbols.default.info} you can also start selective entries by running

    ${bulletSymbol} ${_chalk.default.yellow(isYarn() ? 'yarn start -e 0 1' : 'npm run start -e 0 1')}
`;
  console.log(msg);
}

function endServeInfo() {
  const msg = `${_logSymbols.default.success} ${wpackLogoSmall} server has been ${_chalk.default.redBright('stopped')}.
To create production build, run

    ${bulletSymbol} ${_chalk.default.yellow(isYarn() ? 'yarn build' : 'npm run build')}.

Thank you for using ${wpackLink}.
To spread the ${_chalk.default.red(_figures.default.heart)} please ${_chalk.default.yellowBright(_figures.default.star)} our repo and tweet.

${donationSentence}`;
  console.log(msg);
}

function endBuildInfo() {
  const msg = `${wpackLogoSmall} production build was ${_chalk.default.green('successful')}.

All files were written to disk and you can visit your local server.

If your filesize is too large, remember you can use advanced
dynamic import and multiple entry-points easily with ${wpackLogoSmall}.

    ${bulletSymbol} For more info, visit: ${wpackLink}.

To spread the ${_chalk.default.red(_figures.default.heart)} please ${_chalk.default.yellowBright(_figures.default.star)} our repo and tweet.

${donationSentence}`;
  console.log(msg);
}

function endBootstrapInfo() {
  const msg = `${wpackLogoSmall} was ${_chalk.default.green('successfully')} integrated within your project.

If this is your first run edit your ${_chalk.default.bold.magenta('wpackio.project.js')} file and put
entrypoints. You will find examples within the file itself.

You should keep ${_chalk.default.bold.yellow('wpackio.server.js')} outside your VCS tracking
as it will most likely differ for different users.

You can run ${_chalk.default.dim('bootstrap')} command again and it will create the
${_chalk.default.bold.yellow('wpackio.server.js')} file if not present.

    ${bulletSymbol} Start Development: ${_chalk.default.yellow(isYarn() ? 'yarn start' : 'npm start')}.
    ${bulletSymbol} Production Build: ${_chalk.default.yellow(isYarn() ? 'yarn build' : 'npm run build')}.
    ${bulletSymbol} Create local server config: ${_chalk.default.yellow(isYarn() ? 'yarn bootstrap' : 'npm run bootstrap')}.
    ${bulletSymbol} Create distributable zip: ${_chalk.default.yellow(isYarn() ? 'yarn archive' : 'npm run archive')}.
    ${bulletSymbol} For more info, visit: ${wpackLink}.

To enqueue the assets within your plugin or theme, make sure you
have ${_chalk.default.yellow('wpackio/enqueue')} package from packagist.org/composer
and follow the intructions from documentation. To install now, run

    ${bulletSymbol} ${_chalk.default.yellow('composer require wpackio/enqueue')}.

To spread the ${_chalk.default.red(_figures.default.heart)} please ${_chalk.default.yellowBright(_figures.default.star)} our repo and tweet.`;
  console.log(msg);
}

function prettyPrintError(e, errorMsg) {
  const errorPrefix = `  ${_chalk.default.dim.red(_figures.default.pointer)}  `;
  console.log(_chalk.default.dim('='.repeat(errorMsg.length + 2)));
  console.log(`${_logSymbols.default.error} ${errorMsg}`);
  console.log(_chalk.default.dim('='.repeat(errorMsg.length + 2)));
  console.log('');

  if (e instanceof _WpackioError.WpackioError) {
    console.log(_chalk.default.bgRed.black(' please review the following errors '));
    console.log('');
    console.error(errorPrefix + e.message.split('\n').reduce((acc, line) => `${acc}\n${errorPrefix}${line}`));
  } else {
    const pe = new _prettyError.default();
    console.error(pe.render(e));
  }

  console.log('\n\n\n');
}

function getProgressBar(done) {
  if (Number.isNaN(done) || done === Infinity || done === -Infinity) {
    // eslint-disable-next-line no-param-reassign
    done = 0;
  }

  const pbDoneLength = Math.floor(done / 100 * 20);
  let gFunc = (0, _gradientString.default)('red', 'red');

  if (pbDoneLength >= 5) {
    gFunc = (0, _gradientString.default)('red', 'red', 'yellow');
  }

  if (pbDoneLength >= 10) {
    gFunc = (0, _gradientString.default)('red', 'red', 'yellow', 'yellow');
  }

  if (pbDoneLength >= 15) {
    gFunc = (0, _gradientString.default)('red', 'red', 'yellow', 'yellow', 'green');
  }

  const pbDone = gFunc('='.repeat(pbDoneLength));

  const pbDoing = _chalk.default.gray('-'.repeat(20 - pbDoneLength));

  return `[${pbDone}${pbDoing}] ${_chalk.default.yellow(done.toFixed(2))}%`;
}

function getFileCopyProgress(progress) {
  let done = 0;
  let totalFiles = 0;
  let filesDone = 0;
  let size = 0;

  if (progress) {
    done = Math.round(progress.completedFiles / progress.totalFiles * 100); // eslint-disable-next-line prefer-destructuring

    totalFiles = progress.totalFiles;
    filesDone = progress.completedFiles;
    size = progress.completedSize;
  }

  return `copying files ${getProgressBar(done)} ${_chalk.default.magenta(filesDone.toString())}${_chalk.default.dim('/')}${_chalk.default.cyan(totalFiles.toString())} Files ${_chalk.default.blue((size / 1024).toFixed(2))} KB`;
}

function getZipProgress(data) {
  let entriesTotal = 0;
  let entriesProcessed = 0;
  let bytesTotal = 0;
  let bytesProcessed = 0;

  if (data) {
    entriesTotal = data.entries.total;
    entriesProcessed = data.entries.processed;
    bytesTotal = data.fs.totalBytes;
    bytesProcessed = data.fs.processedBytes;
  }

  const done = Math.round(entriesProcessed / entriesTotal * 100);
  return `creating zip ${getProgressBar(done)} ${_chalk.default.magenta(entriesProcessed.toString())}${_chalk.default.dim('/')}${_chalk.default.cyan(entriesTotal.toString())} Files ${_chalk.default.blue((bytesProcessed / 1024).toFixed(2))}${_chalk.default.dim('/')}${_chalk.default.cyan((bytesTotal / 1024).toFixed(2))} KB`;
}

function endPackInfo(results) {
  const msg = `${_chalk.default.bgGreenBright(_chalk.default.bold.hex('#000000')(' OUTPUT '))}

    ${bulletSymbol} Zip Location: ${_chalk.default.blue(results.relPath)}.
    ${bulletSymbol} File Size: ${_chalk.default.blue((results.size / 1024).toFixed(2))} KB.

${wpackLogoSmall} package and archive was ${_chalk.default.green('successful')}.

Thank you for using ${wpackLink}.
To spread the ${_chalk.default.red(_figures.default.heart)} please ${_chalk.default.yellowBright(_figures.default.star)} our repo and tweet.

${donationSentence}`;
  console.log(msg);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,