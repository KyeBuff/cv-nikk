import webpack from 'webpack';
/**
 * This file holds useful utility functions for file-loader
 */
/**
 * Get options for file-loader.
 *
 * This takes into account the appDir, development or production mode and
 * publicPath for file-loader usage from css files.
 *
 * @param appDir Application directory (corresponds to files[i].name).
 * @param isDev Whether this is for development or production build.
 * @param publicPath Whether to include publicPath.
 */
export declare function getFileLoaderOptions(appDir: string, isDev: boolean, publicPath: boolean): {
    [x: string]: string | undefined;
};
/**
 * Webpack module.rules[].issuer function to check if the issuer is
 * a style file (scss, sass, css).
 */
export declare function issuerForStyleFiles(location: string): boolean;
/**
 * Webpack module.rules[].issuer function to check if the issuer is NOT
 * a style file (scss, sass, css).
 */
export declare function issuerForNonStyleFiles(location: string): boolean;
/**
 * Webpack module.rules[].issuer function to check if the issuer is NOT a
 * JavaScript (js,jsx) or TypeScript(ts,tsx) file.
 */
export declare function issuerForJsTsFiles(location: string): boolean;
/**
 * Webpack module.rules[].issuer function to check if the issuer is a JavaScript
 * (js,jsx) or TypeScript(ts,tsx) file.
 */
export declare function issuerForNonJsTsFiles(location: string): boolean;
/**
 * Get file-loader with proper options set for javascript and style files.
 *
 * It makes sure that assets are put into proper directory and relativePath
 * works fine for css imports.
 *
 * @param appDir Application directory (corresponds to files[i].name).
 * @param isDev Whether this is for development or production build.
 * @param loader Name of the loader, defaults to `file-loader`.
 */
export declare function getFileLoaderForJsAndStyleAssets(appDir: string, isDev: boolean, loader?: string): {
    fileRulesNonStyle: webpack.RuleSetRule;
    fileRulesStyle: webpack.RuleSetRule;
};
export declare function getStyleLoaderUses(isDev: boolean, publicPathUrl: string, preprocessor: boolean): webpack.RuleSetUseItem[];
/**
 * Get resolved loader from @wpackio/scripts for your own usage.
 *
 * @param loader Webpack Loader.
 */
export declare function getResolvedLoader(loader: string): string;
export declare const babelLoader: string;
export declare const fileLoader: string;
export declare const cssLoader: string;
export declare const sassLoader: string;
export declare const lessLoader: string;
export declare const postCssLoader: string;
