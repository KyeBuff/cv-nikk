"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateProjectConfig = validateProjectConfig;
exports.validateServerConfig = validateServerConfig;
exports.getProjectConfig = getProjectConfig;
exports.getServerConfig = getServerConfig;
exports.getProjectAndServerConfig = getProjectAndServerConfig;

var _camelcase = _interopRequireDefault(require("camelcase"));

var _chalk = _interopRequireDefault(require("chalk"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("../bin/utils");

var _WpackioError = require("../errors/WpackioError");

var _projectConfig = require("./project.config.default");

var _serverConfig = require("./server.config.default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function validateProjectConfig(projectConfig) {
  if (typeof projectConfig !== 'object') {
    throw new _WpackioError.WpackioError(`Project configuration must export an object literal.\nRight now it is ${_chalk.default.yellow(typeof projectConfig)}`);
  } // Check if the appName is okay


  if (!projectConfig.appName) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('appName')} must be present in project config.`);
  }

  if (!/^[A-Za-z]+$/.test(projectConfig.appName)) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('appName')} must be in camelCase in project config.\nCurrently ${_chalk.default.red(projectConfig.appName)}, try ${_chalk.default.green((0, _camelcase.default)(projectConfig.appName))}`);
  } // validate runtime config
  // 1. if files is invalid


  if (!projectConfig.files || !Array.isArray(projectConfig.files)) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('files')} under project configuration must be an array.\nCurrently it is ${_chalk.default.red(typeof projectConfig.files)}`);
  } // 2. if files is empty


  if (projectConfig.files.length === 0) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('files')} under project configuration must have at-least one object.`);
  } // 3. validate files array


  if (!projectConfig.files.every(file => typeof file === 'object' && file.name != null && file.entry != null)) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('files')} under project configuration must have objects with\n${_chalk.default.magenta('name')} and ${_chalk.default.magenta('entry')}.\nAt-least one of the objects does not satisfy the condition.`);
  } // 4. Validate package configs


  if (!projectConfig.packageDirPath || projectConfig.packageDirPath === '') {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('packageDirPath')} under project configuration must be valid.\nIt defines the path to package output directory.`);
  }

  if (!projectConfig.packageFiles || !Array.isArray(projectConfig.packageFiles) || !projectConfig.packageFiles.length || !projectConfig.packageFiles.every(f => typeof f === 'string')) {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('packageFiles')} under project configuration must be valid glob patterns.`);
  }

  return true;
}

function validateServerConfig(serverConfig) {
  if (typeof serverConfig !== 'object') {
    throw new _WpackioError.WpackioError(`Server configuration must export an object literal.\nRight now it is ${_chalk.default.yellow(typeof serverConfig)}`);
  } // Check if server config has proxy


  if (!serverConfig.proxy || serverConfig.proxy === '') {
    throw new _WpackioError.WpackioError(`${_chalk.default.yellow('proxy')} under server configuration must be an URL to your development server.`);
  }

  return true;
}

function getProjectConfig(cwd, options) {
  const projectConfigPath = _path.default.resolve(cwd, options && options.projectConfig ? options.projectConfig : 'wpackio.project.js');

  let projectConfig; // First check to see if the files are present

  try {
    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires
    projectConfig = require(projectConfigPath);
  } catch (e) {
    throw new _WpackioError.WpackioError(`Could not find project configuration at:\n${_chalk.default.dim(projectConfigPath)}\nPlease make sure the file exists\nor adjust your ${_chalk.default.yellow('--context')} or ${_chalk.default.yellow('--project-config')} parameters.\nIf this is your first time, try running\n${_chalk.default.magenta(`${(0, _utils.isYarn)() ? 'yarn' : 'npm run'} bootstrap`)}`);
  } // Now validate them


  validateProjectConfig(projectConfig);
  return {
    projectConfig: _objectSpread(_objectSpread({}, _projectConfig.projectConfigDefault), projectConfig),
    projectConfigPath
  };
}

function getServerConfig(cwd, options) {
  // Get the config file paths from options
  // If user is passing relative path, then it will be used along with cwd
  // If it is absolute path, then the absolute would be used instead
  // This is how path.resolve works.
  const serverConfigPath = _path.default.resolve(cwd, options && options.serverConfig ? options.serverConfig : 'wpackio.server.js'); // Now create the configuration objects


  let serverConfig;

  try {
    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires
    serverConfig = require(serverConfigPath);
  } catch (e) {
    throw new _WpackioError.WpackioError(`Could not find server configuration at:\n${_chalk.default.dim(serverConfigPath)}\nPlease make sure the file exists\nor adjust your ${_chalk.default.yellow('--context')} or ${_chalk.default.yellow('--server-config')} parameters.\nIf this is your first time, try running\n${_chalk.default.magenta(`${(0, _utils.isYarn)() ? 'yarn' : 'npm run'} bootstrap`)}`);
  } // Validate them


  validateServerConfig(serverConfig);
  return {
    serverConfig: _objectSpread(_objectSpread({}, _serverConfig.serverConfigDefault), serverConfig),
    serverConfigPath
  };
}

function getProjectAndServerConfig(cwd, options) {
  return _objectSpread(_objectSpread({}, getProjectConfig(cwd, options)), getServerConfig(cwd, options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,