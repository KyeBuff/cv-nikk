"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultBabelPresetOptions = getDefaultBabelPresetOptions;
exports.overrideBabelPresetOptions = overrideBabelPresetOptions;
exports.getBabelPresets = getBabelPresets;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Get default options for @wpackio/babel-preset-base considering whether
 * project has react and whether it is in development mode.
 *
 * @param hasReact Whether to include react jsx transform.
 * @param isDev Whether in development mode or production mode.
 */
function getDefaultBabelPresetOptions(hasReact, isDev = false) {
  const defaultBabelOptions = {
    hasReact,
    presetEnv: {},
    presetReact: {}
  }; // Push targets to babel-preset-env if this is dev
  // We target only the latest chrome and firefox for
  // greater speed

  if (isDev) {
    defaultBabelOptions.presetEnv = {
      targets: {
        chrome: '69',
        firefox: '62',
        edge: '17'
      }
    };
  }

  return defaultBabelOptions;
}
/**
 * Get final options for @wpackio/babel-preset-base, combining both
 * system default and user defined value.
 *
 * @param defaults Default options for @wpackio/babel-preset-base.
 * @param options User defined options for @wpackio/babel-preset-base.
 */


function overrideBabelPresetOptions(defaults, options) {
  // If options is not undefined or null, then spread over it
  if (options !== undefined) {
    return _objectSpread(_objectSpread({}, defaults), options);
  }

  return defaults;
} // We support only flow and typescript out of the box
// with babel


/**
 * Get Babel Presets for compiling JavaScript or TypeScript files.
 *
 * @param presetOptions Options for `@wpackio/base`.
 * @param typeChecker Whether to include preset for 'flow' or 'typescript'. Leave `undefined` to ignore both.
 */
function getBabelPresets(presetOptions, typeChecker) {
  const babelConfig = [[require.resolve('@wpackio/babel-preset-base'), presetOptions]]; // If we have flow then push the preset

  if (typeChecker === 'flow') {
    babelConfig.push([require.resolve('@babel/preset-flow')]);
  } // If we have typescript, then push the preset


  if (typeChecker === 'typescript') {
    babelConfig.push([require.resolve('@babel/preset-typescript'), {
      onlyRemoveTypeImports: true
    }]);
  }

  return babelConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvYmFiZWxDb25maWcudHMiXSwibmFtZXMiOlsiZ2V0RGVmYXVsdEJhYmVsUHJlc2V0T3B0aW9ucyIsImhhc1JlYWN0IiwiaXNEZXYiLCJkZWZhdWx0QmFiZWxPcHRpb25zIiwicHJlc2V0RW52IiwicHJlc2V0UmVhY3QiLCJ0YXJnZXRzIiwiY2hyb21lIiwiZmlyZWZveCIsImVkZ2UiLCJvdmVycmlkZUJhYmVsUHJlc2V0T3B0aW9ucyIsImRlZmF1bHRzIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsImdldEJhYmVsUHJlc2V0cyIsInByZXNldE9wdGlvbnMiLCJ0eXBlQ2hlY2tlciIsImJhYmVsQ29uZmlnIiwicmVxdWlyZSIsInJlc29sdmUiLCJwdXNoIiwib25seVJlbW92ZVR5cGVJbXBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLDRCQUFULENBQ05DLFFBRE0sRUFFTkMsS0FBYyxHQUFHLEtBRlgsRUFHVTtBQUNoQixRQUFNQyxtQkFBa0MsR0FBRztBQUMxQ0YsSUFBQUEsUUFEMEM7QUFFMUNHLElBQUFBLFNBQVMsRUFBRSxFQUYrQjtBQUcxQ0MsSUFBQUEsV0FBVyxFQUFFO0FBSDZCLEdBQTNDLENBRGdCLENBT2hCO0FBQ0E7QUFDQTs7QUFDQSxNQUFJSCxLQUFKLEVBQVc7QUFDVkMsSUFBQUEsbUJBQW1CLENBQUNDLFNBQXBCLEdBQWdDO0FBQy9CRSxNQUFBQSxPQUFPLEVBQUU7QUFDUkMsUUFBQUEsTUFBTSxFQUFFLElBREE7QUFFUkMsUUFBQUEsT0FBTyxFQUFFLElBRkQ7QUFHUkMsUUFBQUEsSUFBSSxFQUFFO0FBSEU7QUFEc0IsS0FBaEM7QUFPQTs7QUFFRCxTQUFPTixtQkFBUDtBQUNBO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNPLDBCQUFULENBQ05DLFFBRE0sRUFFTkMsT0FGTSxFQUdVO0FBQ2hCO0FBQ0EsTUFBSUEsT0FBTyxLQUFLQyxTQUFoQixFQUEyQjtBQUMxQiwyQ0FBWUYsUUFBWixHQUF5QkMsT0FBekI7QUFDQTs7QUFDRCxTQUFPRCxRQUFQO0FBQ0EsQyxDQUVEO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNHLGVBQVQsQ0FDTkMsYUFETSxFQUVOQyxXQUZNLEVBR1U7QUFDaEIsUUFBTUMsV0FBMEIsR0FBRyxDQUNsQyxDQUFDQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsNEJBQWhCLENBQUQsRUFBZ0RKLGFBQWhELENBRGtDLENBQW5DLENBRGdCLENBS2hCOztBQUNBLE1BQUlDLFdBQVcsS0FBSyxNQUFwQixFQUE0QjtBQUMzQkMsSUFBQUEsV0FBVyxDQUFDRyxJQUFaLENBQWlCLENBQUNGLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQixvQkFBaEIsQ0FBRCxDQUFqQjtBQUNBLEdBUmUsQ0FTaEI7OztBQUNBLE1BQUlILFdBQVcsS0FBSyxZQUFwQixFQUFrQztBQUNqQ0MsSUFBQUEsV0FBVyxDQUFDRyxJQUFaLENBQWlCLENBQ2hCRixPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsMEJBQWhCLENBRGdCLEVBRWhCO0FBQ0NFLE1BQUFBLHFCQUFxQixFQUFFO0FBRHhCLEtBRmdCLENBQWpCO0FBTUE7O0FBQ0QsU0FBT0osV0FBUDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0YmFiZWxQcmVzZXQsXG5cdFByZXNldE9wdGlvbnMsXG59IGZyb20gJ0B3cGFja2lvL2JhYmVsLXByZXNldC1iYXNlL2xpYi9wcmVzZXQnO1xuXG4vKipcbiAqIEdldCBkZWZhdWx0IG9wdGlvbnMgZm9yIEB3cGFja2lvL2JhYmVsLXByZXNldC1iYXNlIGNvbnNpZGVyaW5nIHdoZXRoZXJcbiAqIHByb2plY3QgaGFzIHJlYWN0IGFuZCB3aGV0aGVyIGl0IGlzIGluIGRldmVsb3BtZW50IG1vZGUuXG4gKlxuICogQHBhcmFtIGhhc1JlYWN0IFdoZXRoZXIgdG8gaW5jbHVkZSByZWFjdCBqc3ggdHJhbnNmb3JtLlxuICogQHBhcmFtIGlzRGV2IFdoZXRoZXIgaW4gZGV2ZWxvcG1lbnQgbW9kZSBvciBwcm9kdWN0aW9uIG1vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0QmFiZWxQcmVzZXRPcHRpb25zKFxuXHRoYXNSZWFjdDogYm9vbGVhbixcblx0aXNEZXY6IGJvb2xlYW4gPSBmYWxzZVxuKTogUHJlc2V0T3B0aW9ucyB7XG5cdGNvbnN0IGRlZmF1bHRCYWJlbE9wdGlvbnM6IFByZXNldE9wdGlvbnMgPSB7XG5cdFx0aGFzUmVhY3QsXG5cdFx0cHJlc2V0RW52OiB7fSxcblx0XHRwcmVzZXRSZWFjdDoge30sXG5cdH07XG5cblx0Ly8gUHVzaCB0YXJnZXRzIHRvIGJhYmVsLXByZXNldC1lbnYgaWYgdGhpcyBpcyBkZXZcblx0Ly8gV2UgdGFyZ2V0IG9ubHkgdGhlIGxhdGVzdCBjaHJvbWUgYW5kIGZpcmVmb3ggZm9yXG5cdC8vIGdyZWF0ZXIgc3BlZWRcblx0aWYgKGlzRGV2KSB7XG5cdFx0ZGVmYXVsdEJhYmVsT3B0aW9ucy5wcmVzZXRFbnYgPSB7XG5cdFx0XHR0YXJnZXRzOiB7XG5cdFx0XHRcdGNocm9tZTogJzY5Jyxcblx0XHRcdFx0ZmlyZWZveDogJzYyJyxcblx0XHRcdFx0ZWRnZTogJzE3Jyxcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBkZWZhdWx0QmFiZWxPcHRpb25zO1xufVxuXG4vKipcbiAqIEdldCBmaW5hbCBvcHRpb25zIGZvciBAd3BhY2tpby9iYWJlbC1wcmVzZXQtYmFzZSwgY29tYmluaW5nIGJvdGhcbiAqIHN5c3RlbSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIGRlZmF1bHRzIERlZmF1bHQgb3B0aW9ucyBmb3IgQHdwYWNraW8vYmFiZWwtcHJlc2V0LWJhc2UuXG4gKiBAcGFyYW0gb3B0aW9ucyBVc2VyIGRlZmluZWQgb3B0aW9ucyBmb3IgQHdwYWNraW8vYmFiZWwtcHJlc2V0LWJhc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvdmVycmlkZUJhYmVsUHJlc2V0T3B0aW9ucyhcblx0ZGVmYXVsdHM6IFByZXNldE9wdGlvbnMsXG5cdG9wdGlvbnM6IFByZXNldE9wdGlvbnMgfCB1bmRlZmluZWRcbik6IFByZXNldE9wdGlvbnMge1xuXHQvLyBJZiBvcHRpb25zIGlzIG5vdCB1bmRlZmluZWQgb3IgbnVsbCwgdGhlbiBzcHJlYWQgb3ZlciBpdFxuXHRpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIHsgLi4uZGVmYXVsdHMsIC4uLm9wdGlvbnMgfTtcblx0fVxuXHRyZXR1cm4gZGVmYXVsdHM7XG59XG5cbi8vIFdlIHN1cHBvcnQgb25seSBmbG93IGFuZCB0eXBlc2NyaXB0IG91dCBvZiB0aGUgYm94XG4vLyB3aXRoIGJhYmVsXG5leHBvcnQgdHlwZSB0eXBlbGFuZyA9ICdmbG93JyB8ICd0eXBlc2NyaXB0JztcblxuLyoqXG4gKiBHZXQgQmFiZWwgUHJlc2V0cyBmb3IgY29tcGlsaW5nIEphdmFTY3JpcHQgb3IgVHlwZVNjcmlwdCBmaWxlcy5cbiAqXG4gKiBAcGFyYW0gcHJlc2V0T3B0aW9ucyBPcHRpb25zIGZvciBgQHdwYWNraW8vYmFzZWAuXG4gKiBAcGFyYW0gdHlwZUNoZWNrZXIgV2hldGhlciB0byBpbmNsdWRlIHByZXNldCBmb3IgJ2Zsb3cnIG9yICd0eXBlc2NyaXB0Jy4gTGVhdmUgYHVuZGVmaW5lZGAgdG8gaWdub3JlIGJvdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWJlbFByZXNldHMoXG5cdHByZXNldE9wdGlvbnM6IFByZXNldE9wdGlvbnMsXG5cdHR5cGVDaGVja2VyPzogdHlwZWxhbmdcbik6IGJhYmVsUHJlc2V0W10ge1xuXHRjb25zdCBiYWJlbENvbmZpZzogYmFiZWxQcmVzZXRbXSA9IFtcblx0XHRbcmVxdWlyZS5yZXNvbHZlKCdAd3BhY2tpby9iYWJlbC1wcmVzZXQtYmFzZScpLCBwcmVzZXRPcHRpb25zXSxcblx0XTtcblxuXHQvLyBJZiB3ZSBoYXZlIGZsb3cgdGhlbiBwdXNoIHRoZSBwcmVzZXRcblx0aWYgKHR5cGVDaGVja2VyID09PSAnZmxvdycpIHtcblx0XHRiYWJlbENvbmZpZy5wdXNoKFtyZXF1aXJlLnJlc29sdmUoJ0BiYWJlbC9wcmVzZXQtZmxvdycpXSk7XG5cdH1cblx0Ly8gSWYgd2UgaGF2ZSB0eXBlc2NyaXB0LCB0aGVuIHB1c2ggdGhlIHByZXNldFxuXHRpZiAodHlwZUNoZWNrZXIgPT09ICd0eXBlc2NyaXB0Jykge1xuXHRcdGJhYmVsQ29uZmlnLnB1c2goW1xuXHRcdFx0cmVxdWlyZS5yZXNvbHZlKCdAYmFiZWwvcHJlc2V0LXR5cGVzY3JpcHQnKSxcblx0XHRcdHtcblx0XHRcdFx0b25seVJlbW92ZVR5cGVJbXBvcnRzOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRdKTtcblx0fVxuXHRyZXR1cm4gYmFiZWxDb25maWc7XG59XG4iXX0=