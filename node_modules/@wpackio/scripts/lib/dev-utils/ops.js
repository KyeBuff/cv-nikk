"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileExists = fileExists;
exports.hasTypeScript = hasTypeScript;
exports.wpackioRequestsToExternals = wpackioRequestsToExternals;
exports.defaultRequestToExternal = defaultRequestToExternal;
exports.wpackioRequestToHandle = wpackioRequestToHandle;
exports.defaultRequestToHandle = defaultRequestToHandle;
exports.basename = basename;
exports.getLockFilename = getLockFilename;
exports.lock = lock;
exports.unlock = unlock;
exports.BUNDLED_PACKAGES = exports.WORDPRESS_NAMESPACE = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _lockfile = _interopRequireDefault(require("lockfile"));

var _util = _interopRequireDefault(require("util"));

var _os = _interopRequireDefault(require("os"));

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lfUnlock = _util.default.promisify(_lockfile.default.unlock);
/**
 * Check if file exists or not using fs API.
 */


function fileExists(filepath) {
  try {
    // tslint:disable-next-line:non-literal-fs-path
    return _fs.default.statSync(filepath).isFile();
  } catch (_) {
    return false;
  }
}
/**
 * Check whether current working directory is a typescript project.
 *
 *
 * @param cwd Current working directory.
 * @returns True if tsconfig is found, false otherwiise.
 */


function hasTypeScript(cwd) {
  const tsconfigPath = _path.default.resolve(cwd, './tsconfig.json');

  return [fileExists(tsconfigPath), tsconfigPath];
}

const WORDPRESS_NAMESPACE = '@wordpress/';
exports.WORDPRESS_NAMESPACE = WORDPRESS_NAMESPACE;
const BUNDLED_PACKAGES = ['@wordpress/icons', '@wordpress/interface'];
/**
 * Given a string, returns a new string with dash separators converted to
 * camelCase equivalent. This is not as aggressive as `_.camelCase` in
 * converting to uppercase, where Lodash will also capitalize letters
 * following numbers.
 *
 * @see {https://github.com/WordPress/gutenberg/blob/c047e2716149c794eebff3c2c002f66a6f546f59/packages/dependency-extraction-webpack-plugin/lib/util.js#L83}
 *
 * @param {string} input Input dash-delimited string.
 * @return {string} Camel-cased string.
 */

exports.BUNDLED_PACKAGES = BUNDLED_PACKAGES;

function camelCaseDash(input) {
  return input.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
}
/**
 * Wpackio specific request to global transformation. This is used in
 * @wordpress/dependency-extraction-webpack-plugin.
 *
 * Unlike the default one, it doesn't transform react/reactdom, moment, jQuery
 * etc.
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/api-fetch` becomes `[ 'wp', 'apiFetch' ]`
 * - request `@wordpress/i18n` becomes `[ 'wp', 'i18n' ]`
 *
 * @param request Module request (the module name in `import from`) to be transformed
 * @returns The resulting external definition. Return `undefined`
 *   to ignore the request. Return `string|string[]` to map the request to an external.
 */


function wpackioRequestsToExternals(request) {
  if (BUNDLED_PACKAGES.includes(request)) {
    return undefined;
  }

  if (request.startsWith(WORDPRESS_NAMESPACE)) {
    return ['wp', camelCaseDash(request.substring(WORDPRESS_NAMESPACE.length))];
  }

  return undefined;
}
/**
 * Default request to global transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/api-fetch` becomes `[ 'wp', 'apiFetch' ]`
 * - request `@wordpress/i18n` becomes `[ 'wp', 'i18n' ]`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|string[]|undefined} The resulting external definition. Return `undefined`
 *   to ignore the request. Return `string|string[]` to map the request to an external.
 */


function defaultRequestToExternal(request) {
  switch (request) {
    case 'moment':
      return request;

    case '@babel/runtime/regenerator':
      return 'regeneratorRuntime';

    case 'lodash':
    case 'lodash-es':
      return 'lodash';

    case 'jquery':
      return 'jQuery';

    case 'react':
      return 'React';

    case 'react-dom':
      return 'ReactDOM';

    default:
      return wpackioRequestsToExternals(request);
  }
}
/**
 * Wpackio specific request to WordPress script handle transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/i18n` becomes `wp-i18n`
 * - request `@wordpress/escape-html` becomes `wp-escape-html`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|undefined} WordPress script handle to map the request to. Return `undefined`
 *   to use the same name as the module.
 */


function wpackioRequestToHandle(request) {
  if (request.startsWith(WORDPRESS_NAMESPACE)) {
    return `wp-${request.substring(WORDPRESS_NAMESPACE.length)}`;
  }

  return undefined;
}
/**
 * Default request to WordPress script handle transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/i18n` becomes `wp-i18n`
 * - request `@wordpress/escape-html` becomes `wp-escape-html`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|undefined} WordPress script handle to map the request to. Return `undefined`
 *   to use the same name as the module.
 */


function defaultRequestToHandle(request) {
  switch (request) {
    case '@babel/runtime/regenerator':
      return 'wp-polyfill';

    case 'lodash-es':
      return 'lodash';

    default:
      return wpackioRequestToHandle(request);
  }
}
/**
 * Get the name of the file from a file path.
 *
 * @param name Full path of the filename.
 * @returns Just the name of the file.
 */


function basename(name) {
  if (!name.includes('/')) {
    return name;
  }

  return name.substr(name.lastIndexOf('/') + 1);
}

function md5(data) {
  return _crypto.default.createHash('md5').update(data).digest('hex');
}
/**
 * Build a file path to a lock file in the tmp directory
 *
 * @param {string} filename
 */


function getLockFilename(filename) {
  const name = _path.default.basename(filename);

  const dirHash = md5(_path.default.dirname(filename));
  return _path.default.join(_os.default.tmpdir(), `${dirHash}-${name}.lock`);
}
/**
 * Create a lockfile (async)
 *
 * @param {string} filename
 */


async function lock(filename) {
  await new Promise((resolve, reject) => {
    _lockfile.default.lock(getLockFilename(filename), {
      wait: 6000,
      retryWait: 100,
      stale: 5000,
      retries: 100
    }, err => {
      if (err) {
        reject(err);
        return;
      }

      resolve();
    });
  });
}
/**
 * Remove a lockfile (async)
 *
 * @param {string} filename
 */


async function unlock(filename) {
  await lfUnlock(getLockFilename(filename));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXYtdXRpbHMvb3BzLnRzIl0sIm5hbWVzIjpbImxmVW5sb2NrIiwidXRpbCIsInByb21pc2lmeSIsImxvY2tmaWxlIiwidW5sb2NrIiwiZmlsZUV4aXN0cyIsImZpbGVwYXRoIiwiZnMiLCJzdGF0U3luYyIsImlzRmlsZSIsIl8iLCJoYXNUeXBlU2NyaXB0IiwiY3dkIiwidHNjb25maWdQYXRoIiwicGF0aCIsInJlc29sdmUiLCJXT1JEUFJFU1NfTkFNRVNQQUNFIiwiQlVORExFRF9QQUNLQUdFUyIsImNhbWVsQ2FzZURhc2giLCJpbnB1dCIsInJlcGxhY2UiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsIndwYWNraW9SZXF1ZXN0c1RvRXh0ZXJuYWxzIiwicmVxdWVzdCIsImluY2x1ZGVzIiwidW5kZWZpbmVkIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImxlbmd0aCIsImRlZmF1bHRSZXF1ZXN0VG9FeHRlcm5hbCIsIndwYWNraW9SZXF1ZXN0VG9IYW5kbGUiLCJkZWZhdWx0UmVxdWVzdFRvSGFuZGxlIiwiYmFzZW5hbWUiLCJuYW1lIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJtZDUiLCJkYXRhIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImdldExvY2tGaWxlbmFtZSIsImZpbGVuYW1lIiwiZGlySGFzaCIsImRpcm5hbWUiLCJqb2luIiwib3MiLCJ0bXBkaXIiLCJsb2NrIiwiUHJvbWlzZSIsInJlamVjdCIsIndhaXQiLCJyZXRyeVdhaXQiLCJzdGFsZSIsInJldHJpZXMiLCJlcnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxRQUFRLEdBQUdDLGNBQUtDLFNBQUwsQ0FBZUMsa0JBQVNDLE1BQXhCLENBQWpCO0FBRUE7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxVQUFULENBQW9CQyxRQUFwQixFQUEr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LE9BQU8sRUFBRTtBQUFwRCxLQUZELEVBR0NDLEdBQUcsSUFBSTtBQUNOLFVBQUlBLEdBQUosRUFBUztBQUNSTCxRQUFBQSxNQUFNLENBQUNLLEdBQUQsQ0FBTjtBQUNBO0FBQ0E7O0FBQ0QxQyxNQUFBQSxPQUFPO0FBQ1AsS0FURjtBQVdBLEdBWkssQ0FBTjtBQWFBO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sZUFBZVgsTUFBZixDQUFzQndDLFFBQXRCLEVBQXdDO0FBQzlDLFFBQU01QyxRQUFRLENBQUMyQyxlQUFlLENBQUNDLFFBQUQsQ0FBaEIsQ0FBZDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvY2tmaWxlIGZyb20gJ2xvY2tmaWxlJztcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgbGZVbmxvY2sgPSB1dGlsLnByb21pc2lmeShsb2NrZmlsZS51bmxvY2spO1xuXG4vKipcbiAqIENoZWNrIGlmIGZpbGUgZXhpc3RzIG9yIG5vdCB1c2luZyBmcyBBUEkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWxlRXhpc3RzKGZpbGVwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcblx0dHJ5IHtcblx0XHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm9uLWxpdGVyYWwtZnMtcGF0aFxuXHRcdHJldHVybiBmcy5zdGF0U3luYyhmaWxlcGF0aCkuaXNGaWxlKCk7XG5cdH0gY2F0Y2ggKF8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgaXMgYSB0eXBlc2NyaXB0IHByb2plY3QuXG4gKlxuICpcbiAqIEBwYXJhbSBjd2QgQ3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cbiAqIEByZXR1cm5zIFRydWUgaWYgdHNjb25maWcgaXMgZm91bmQsIGZhbHNlIG90aGVyd2lpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNUeXBlU2NyaXB0KGN3ZDogc3RyaW5nKTogW2Jvb2xlYW4sIHN0cmluZ10ge1xuXHRjb25zdCB0c2NvbmZpZ1BhdGggPSBwYXRoLnJlc29sdmUoY3dkLCAnLi90c2NvbmZpZy5qc29uJyk7XG5cdHJldHVybiBbZmlsZUV4aXN0cyh0c2NvbmZpZ1BhdGgpLCB0c2NvbmZpZ1BhdGhdO1xufVxuXG5leHBvcnQgY29uc3QgV09SRFBSRVNTX05BTUVTUEFDRSA9ICdAd29yZHByZXNzLyc7XG5leHBvcnQgY29uc3QgQlVORExFRF9QQUNLQUdFUyA9IFsnQHdvcmRwcmVzcy9pY29ucycsICdAd29yZHByZXNzL2ludGVyZmFjZSddO1xuXG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nLCByZXR1cm5zIGEgbmV3IHN0cmluZyB3aXRoIGRhc2ggc2VwYXJhdG9ycyBjb252ZXJ0ZWQgdG9cbiAqIGNhbWVsQ2FzZSBlcXVpdmFsZW50LiBUaGlzIGlzIG5vdCBhcyBhZ2dyZXNzaXZlIGFzIGBfLmNhbWVsQ2FzZWAgaW5cbiAqIGNvbnZlcnRpbmcgdG8gdXBwZXJjYXNlLCB3aGVyZSBMb2Rhc2ggd2lsbCBhbHNvIGNhcGl0YWxpemUgbGV0dGVyc1xuICogZm9sbG93aW5nIG51bWJlcnMuXG4gKlxuICogQHNlZSB7aHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvYmxvYi9jMDQ3ZTI3MTYxNDljNzk0ZWViZmYzYzJjMDAyZjY2YTZmNTQ2ZjU5L3BhY2thZ2VzL2RlcGVuZGVuY3ktZXh0cmFjdGlvbi13ZWJwYWNrLXBsdWdpbi9saWIvdXRpbC5qcyNMODN9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IElucHV0IGRhc2gtZGVsaW1pdGVkIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWwtY2FzZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBjYW1lbENhc2VEYXNoKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gaW5wdXQucmVwbGFjZSgvLShbYS16XSkvZywgKF8sIGxldHRlcikgPT4gbGV0dGVyLnRvVXBwZXJDYXNlKCkpO1xufVxuXG4vKipcbiAqIFdwYWNraW8gc3BlY2lmaWMgcmVxdWVzdCB0byBnbG9iYWwgdHJhbnNmb3JtYXRpb24uIFRoaXMgaXMgdXNlZCBpblxuICogQHdvcmRwcmVzcy9kZXBlbmRlbmN5LWV4dHJhY3Rpb24td2VicGFjay1wbHVnaW4uXG4gKlxuICogVW5saWtlIHRoZSBkZWZhdWx0IG9uZSwgaXQgZG9lc24ndCB0cmFuc2Zvcm0gcmVhY3QvcmVhY3Rkb20sIG1vbWVudCwgalF1ZXJ5XG4gKiBldGMuXG4gKlxuICogVHJhbnNmb3JtIEB3b3JkcHJlc3MgZGVwZW5kZW5jaWVzOlxuICogLSByZXF1ZXN0IGBAd29yZHByZXNzL2FwaS1mZXRjaGAgYmVjb21lcyBgWyAnd3AnLCAnYXBpRmV0Y2gnIF1gXG4gKiAtIHJlcXVlc3QgYEB3b3JkcHJlc3MvaTE4bmAgYmVjb21lcyBgWyAnd3AnLCAnaTE4bicgXWBcbiAqXG4gKiBAcGFyYW0gcmVxdWVzdCBNb2R1bGUgcmVxdWVzdCAodGhlIG1vZHVsZSBuYW1lIGluIGBpbXBvcnQgZnJvbWApIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIGV4dGVybmFsIGRlZmluaXRpb24uIFJldHVybiBgdW5kZWZpbmVkYFxuICogICB0byBpZ25vcmUgdGhlIHJlcXVlc3QuIFJldHVybiBgc3RyaW5nfHN0cmluZ1tdYCB0byBtYXAgdGhlIHJlcXVlc3QgdG8gYW4gZXh0ZXJuYWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cGFja2lvUmVxdWVzdHNUb0V4dGVybmFscyhcblx0cmVxdWVzdDogc3RyaW5nXG4pOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG5cdGlmIChCVU5ETEVEX1BBQ0tBR0VTLmluY2x1ZGVzKHJlcXVlc3QpKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmIChyZXF1ZXN0LnN0YXJ0c1dpdGgoV09SRFBSRVNTX05BTUVTUEFDRSkpIHtcblx0XHRyZXR1cm4gWyd3cCcsIGNhbWVsQ2FzZURhc2gocmVxdWVzdC5zdWJzdHJpbmcoV09SRFBSRVNTX05BTUVTUEFDRS5sZW5ndGgpKV07XG5cdH1cblxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERlZmF1bHQgcmVxdWVzdCB0byBnbG9iYWwgdHJhbnNmb3JtYXRpb25cbiAqXG4gKiBUcmFuc2Zvcm0gQHdvcmRwcmVzcyBkZXBlbmRlbmNpZXM6XG4gKiAtIHJlcXVlc3QgYEB3b3JkcHJlc3MvYXBpLWZldGNoYCBiZWNvbWVzIGBbICd3cCcsICdhcGlGZXRjaCcgXWBcbiAqIC0gcmVxdWVzdCBgQHdvcmRwcmVzcy9pMThuYCBiZWNvbWVzIGBbICd3cCcsICdpMThuJyBdYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0IE1vZHVsZSByZXF1ZXN0ICh0aGUgbW9kdWxlIG5hbWUgaW4gYGltcG9ydCBmcm9tYCkgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEByZXR1cm4ge3N0cmluZ3xzdHJpbmdbXXx1bmRlZmluZWR9IFRoZSByZXN1bHRpbmcgZXh0ZXJuYWwgZGVmaW5pdGlvbi4gUmV0dXJuIGB1bmRlZmluZWRgXG4gKiAgIHRvIGlnbm9yZSB0aGUgcmVxdWVzdC4gUmV0dXJuIGBzdHJpbmd8c3RyaW5nW11gIHRvIG1hcCB0aGUgcmVxdWVzdCB0byBhbiBleHRlcm5hbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZXF1ZXN0VG9FeHRlcm5hbChcblx0cmVxdWVzdDogc3RyaW5nXG4pOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG5cdHN3aXRjaCAocmVxdWVzdCkge1xuXHRcdGNhc2UgJ21vbWVudCc6XG5cdFx0XHRyZXR1cm4gcmVxdWVzdDtcblxuXHRcdGNhc2UgJ0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yJzpcblx0XHRcdHJldHVybiAncmVnZW5lcmF0b3JSdW50aW1lJztcblxuXHRcdGNhc2UgJ2xvZGFzaCc6XG5cdFx0Y2FzZSAnbG9kYXNoLWVzJzpcblx0XHRcdHJldHVybiAnbG9kYXNoJztcblxuXHRcdGNhc2UgJ2pxdWVyeSc6XG5cdFx0XHRyZXR1cm4gJ2pRdWVyeSc7XG5cblx0XHRjYXNlICdyZWFjdCc6XG5cdFx0XHRyZXR1cm4gJ1JlYWN0JztcblxuXHRcdGNhc2UgJ3JlYWN0LWRvbSc6XG5cdFx0XHRyZXR1cm4gJ1JlYWN0RE9NJztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gd3BhY2tpb1JlcXVlc3RzVG9FeHRlcm5hbHMocmVxdWVzdCk7XG5cdH1cbn1cblxuLyoqXG4gKiBXcGFja2lvIHNwZWNpZmljIHJlcXVlc3QgdG8gV29yZFByZXNzIHNjcmlwdCBoYW5kbGUgdHJhbnNmb3JtYXRpb25cbiAqXG4gKiBUcmFuc2Zvcm0gQHdvcmRwcmVzcyBkZXBlbmRlbmNpZXM6XG4gKiAtIHJlcXVlc3QgYEB3b3JkcHJlc3MvaTE4bmAgYmVjb21lcyBgd3AtaTE4bmBcbiAqIC0gcmVxdWVzdCBgQHdvcmRwcmVzcy9lc2NhcGUtaHRtbGAgYmVjb21lcyBgd3AtZXNjYXBlLWh0bWxgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3QgTW9kdWxlIHJlcXVlc3QgKHRoZSBtb2R1bGUgbmFtZSBpbiBgaW1wb3J0IGZyb21gKSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH0gV29yZFByZXNzIHNjcmlwdCBoYW5kbGUgdG8gbWFwIHRoZSByZXF1ZXN0IHRvLiBSZXR1cm4gYHVuZGVmaW5lZGBcbiAqICAgdG8gdXNlIHRoZSBzYW1lIG5hbWUgYXMgdGhlIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdwYWNraW9SZXF1ZXN0VG9IYW5kbGUocmVxdWVzdDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcblx0aWYgKHJlcXVlc3Quc3RhcnRzV2l0aChXT1JEUFJFU1NfTkFNRVNQQUNFKSkge1xuXHRcdHJldHVybiBgd3AtJHtyZXF1ZXN0LnN1YnN0cmluZyhXT1JEUFJFU1NfTkFNRVNQQUNFLmxlbmd0aCl9YDtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERlZmF1bHQgcmVxdWVzdCB0byBXb3JkUHJlc3Mgc2NyaXB0IGhhbmRsZSB0cmFuc2Zvcm1hdGlvblxuICpcbiAqIFRyYW5zZm9ybSBAd29yZHByZXNzIGRlcGVuZGVuY2llczpcbiAqIC0gcmVxdWVzdCBgQHdvcmRwcmVzcy9pMThuYCBiZWNvbWVzIGB3cC1pMThuYFxuICogLSByZXF1ZXN0IGBAd29yZHByZXNzL2VzY2FwZS1odG1sYCBiZWNvbWVzIGB3cC1lc2NhcGUtaHRtbGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdCBNb2R1bGUgcmVxdWVzdCAodGhlIG1vZHVsZSBuYW1lIGluIGBpbXBvcnQgZnJvbWApIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSBXb3JkUHJlc3Mgc2NyaXB0IGhhbmRsZSB0byBtYXAgdGhlIHJlcXVlc3QgdG8uIFJldHVybiBgdW5kZWZpbmVkYFxuICogICB0byB1c2UgdGhlIHNhbWUgbmFtZSBhcyB0aGUgbW9kdWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlcXVlc3RUb0hhbmRsZShyZXF1ZXN0OiBzdHJpbmcpOiB1bmRlZmluZWQgfCBzdHJpbmcge1xuXHRzd2l0Y2ggKHJlcXVlc3QpIHtcblx0XHRjYXNlICdAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvcic6XG5cdFx0XHRyZXR1cm4gJ3dwLXBvbHlmaWxsJztcblxuXHRcdGNhc2UgJ2xvZGFzaC1lcyc6XG5cdFx0XHRyZXR1cm4gJ2xvZGFzaCc7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiB3cGFja2lvUmVxdWVzdFRvSGFuZGxlKHJlcXVlc3QpO1xuXHR9XG59XG5cbi8qKlxuICogR2V0IHRoZSBuYW1lIG9mIHRoZSBmaWxlIGZyb20gYSBmaWxlIHBhdGguXG4gKlxuICogQHBhcmFtIG5hbWUgRnVsbCBwYXRoIG9mIHRoZSBmaWxlbmFtZS5cbiAqIEByZXR1cm5zIEp1c3QgdGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYXNlbmFtZShuYW1lOiBzdHJpbmcpIHtcblx0aWYgKCFuYW1lLmluY2x1ZGVzKCcvJykpIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gbmFtZS5zdWJzdHIobmFtZS5sYXN0SW5kZXhPZignLycpICsgMSk7XG59XG5cbmZ1bmN0aW9uIG1kNShkYXRhOiBjcnlwdG8uQmluYXJ5TGlrZSB8IHN0cmluZykge1xuXHRyZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShkYXRhKS5kaWdlc3QoJ2hleCcpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgZmlsZSBwYXRoIHRvIGEgbG9jayBmaWxlIGluIHRoZSB0bXAgZGlyZWN0b3J5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NrRmlsZW5hbWUoZmlsZW5hbWU6IHN0cmluZykge1xuXHRjb25zdCBuYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlbmFtZSk7XG5cdGNvbnN0IGRpckhhc2ggPSBtZDUocGF0aC5kaXJuYW1lKGZpbGVuYW1lKSk7XG5cblx0cmV0dXJuIHBhdGguam9pbihvcy50bXBkaXIoKSwgYCR7ZGlySGFzaH0tJHtuYW1lfS5sb2NrYCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbG9ja2ZpbGUgKGFzeW5jKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9jayhmaWxlbmFtZTogc3RyaW5nKSB7XG5cdGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsb2NrZmlsZS5sb2NrKFxuXHRcdFx0Z2V0TG9ja0ZpbGVuYW1lKGZpbGVuYW1lKSxcblx0XHRcdHsgd2FpdDogNjAwMCwgcmV0cnlXYWl0OiAxMDAsIHN0YWxlOiA1MDAwLCByZXRyaWVzOiAxMDAgfSxcblx0XHRcdGVyciA9PiB7XG5cdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH0pO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGxvY2tmaWxlIChhc3luYylcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVubG9jayhmaWxlbmFtZTogc3RyaW5nKSB7XG5cdGF3YWl0IGxmVW5sb2NrKGdldExvY2tGaWxlbmFtZShmaWxlbmFtZSkpO1xufVxuIl19