"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typescriptFormatter = typescriptFormatter;

var _os = _interopRequireDefault(require("os"));

var _codeFrame = require("@babel/code-frame");

var _chalk = _interopRequireDefault(require("chalk"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const issueOrigins = {
  typescript: 'TypeScript',
  internal: 'fork-ts-checker-webpack-plugin'
};

function typescriptFormatter(issue, cwd) {
  const {
    origin,
    severity,
    file,
    location,
    message,
    code
  } = issue;
  const colors = _chalk.default;
  const messageColor = severity === 'warning' ? colors.yellow : colors.red;
  const fileAndNumberColor = colors.bold.cyan;

  const source = file && _fs.default.existsSync(file) && _fs.default.readFileSync(file, 'utf-8');

  const frame = source ? (0, _codeFrame.codeFrameColumns)(source, location, {
    highlightCode: true,
    forceColor: true,
    linesAbove: 3,
    linesBelow: 1
  }).split('\n').map(str => `  ${str}`).join(_os.default.EOL) : '';
  return [messageColor.bold(`${issueOrigins[origin]} ${severity.toLowerCase()} in `) + fileAndNumberColor(`${file.replace(cwd, '.')}(${location.start.line},${location.start.column})`) + messageColor(':'), `${message}  ${messageColor.underline(`TS${code}`)}`, '', frame].join(_os.default.EOL);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXYtdXRpbHMvdHlwZXNjcmlwdEZvcm1hdHRlci50cyJdLCJuYW1lcyI6WyJpc3N1ZU9yaWdpbnMiLCJ0eXBlc2NyaXB0IiwiaW50ZXJuYWwiLCJ0eXBlc2NyaXB0Rm9ybWF0dGVyIiwiaXNzdWUiLCJjd2QiLCJvcmlnaW4iLCJzZXZlcml0eSIsImZpbGUiLCJsb2NhdGlvbiIsIm1lc3NhZ2UiLCJjb2RlIiwiY29sb3JzIiwiY2hhbGsiLCJtZXNzYWdlQ29sb3IiLCJ5ZWxsb3ciLCJyZWQiLCJmaWxlQW5kTnVtYmVyQ29sb3IiLCJib2xkIiwiY3lhbiIsInNvdXJjZSIsImZzIiwiZXhpc3RzU3luYyIsInJlYWRGaWxlU3luYyIsImZyYW1lIiwiaGlnaGxpZ2h0Q29kZSIsImZvcmNlQ29sb3IiLCJsaW5lc0Fib3ZlIiwibGluZXNCZWxvdyIsInNwbGl0IiwibWFwIiwic3RyIiwiam9pbiIsIm9zIiwiRU9MIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwidW5kZXJsaW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUc7QUFDcEJDLEVBQUFBLFVBQVUsRUFBRSxZQURRO0FBRXBCQyxFQUFBQSxRQUFRLEVBQUU7QUFGVSxDQUFyQjs7QUF1Qk8sU0FBU0MsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQStDQyxHQUEvQyxFQUE0RDtBQUNsRSxRQUFNO0FBQUVDLElBQUFBLE1BQUY7QUFBVUMsSUFBQUEsUUFBVjtBQUFvQkMsSUFBQUEsSUFBcEI7QUFBMEJDLElBQUFBLFFBQTFCO0FBQW9DQyxJQUFBQSxPQUFwQztBQUE2Q0MsSUFBQUE7QUFBN0MsTUFBc0RQLEtBQTVEO0FBRUEsUUFBTVEsTUFBTSxHQUFHQyxjQUFmO0FBQ0EsUUFBTUMsWUFBWSxHQUFHUCxRQUFRLEtBQUssU0FBYixHQUF5QkssTUFBTSxDQUFDRyxNQUFoQyxHQUF5Q0gsTUFBTSxDQUFDSSxHQUFyRTtBQUNBLFFBQU1DLGtCQUFrQixHQUFHTCxNQUFNLENBQUNNLElBQVAsQ0FBWUMsSUFBdkM7O0FBRUEsUUFBTUMsTUFBTSxHQUFHWixJQUFJLElBQUlhLFlBQUdDLFVBQUgsQ0FBY2QsSUFBZCxDQUFSLElBQStCYSxZQUFHRSxZQUFILENBQWdCZixJQUFoQixFQUFzQixPQUF0QixDQUE5Qzs7QUFDQSxRQUFNZ0IsS0FBSyxHQUFHSixNQUFNLEdBQ2pCLGlDQUFVQSxNQUFWLEVBQWtCWCxRQUFsQixFQUE0QjtBQUM1QmdCLElBQUFBLGFBQWEsRUFBRSxJQURhO0FBRTVCQyxJQUFBQSxVQUFVLEVBQUUsSUFGZ0I7QUFHNUJDLElBQUFBLFVBQVUsRUFBRSxDQUhnQjtBQUk1QkMsSUFBQUEsVUFBVSxFQUFFO0FBSmdCLEdBQTVCLEVBTUNDLEtBTkQsQ0FNTyxJQU5QLEVBT0NDLEdBUEQsQ0FPS0MsR0FBRyxJQUFLLEtBQUlBLEdBQUksRUFQckIsRUFRQ0MsSUFSRCxDQVFNQyxZQUFHQyxHQVJULENBRGlCLEdBVWpCLEVBVkg7QUFZQSxTQUFPLENBQ05wQixZQUFZLENBQUNJLElBQWIsQ0FBbUIsR0FBRWxCLFlBQVksQ0FBQ00sTUFBRCxDQUFTLElBQUdDLFFBQVEsQ0FBQzRCLFdBQVQsRUFBdUIsTUFBcEUsSUFDQ2xCLGtCQUFrQixDQUNoQixHQUFFVCxJQUFJLENBQUM0QixPQUFMLENBQWEvQixHQUFiLEVBQWtCLEdBQWxCLENBQXVCLElBQUdJLFFBQVEsQ0FBQzRCLEtBQVQsQ0FBZUMsSUFBSyxJQUNoRDdCLFFBQVEsQ0FBQzRCLEtBQVQsQ0FBZUUsTUFDZixHQUhnQixDQURuQixHQU1DekIsWUFBWSxDQUFDLEdBQUQsQ0FQUCxFQVFMLEdBQUVKLE9BQVEsS0FBSUksWUFBWSxDQUFDMEIsU0FBYixDQUF3QixLQUFJN0IsSUFBSyxFQUFqQyxDQUFvQyxFQVI3QyxFQVNOLEVBVE0sRUFVTmEsS0FWTSxFQVdMUSxJQVhLLENBV0FDLFlBQUdDLEdBWEgsQ0FBUDtBQVlBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCB7IGNvZGVGcmFtZUNvbHVtbnMgYXMgY29kZUZyYW1lIH0gZnJvbSAnQGJhYmVsL2NvZGUtZnJhbWUnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmNvbnN0IGlzc3VlT3JpZ2lucyA9IHtcblx0dHlwZXNjcmlwdDogJ1R5cGVTY3JpcHQnLFxuXHRpbnRlcm5hbDogJ2ZvcmstdHMtY2hlY2tlci13ZWJwYWNrLXBsdWdpbicsXG59O1xuXG5leHBvcnQgdHlwZSBpc3N1ZVR5cGUgPSB7XG5cdG9yaWdpbjogJ3R5cGVzY3JpcHQnIHwgJ2ludGVybmFsJztcblx0Y29kZTogc3RyaW5nO1xuXHRzZXZlcml0eTogJ2Vycm9yJyB8ICd3YXJuaW5nJztcblx0bWVzc2FnZTogc3RyaW5nO1xuXHRmaWxlOiBzdHJpbmc7XG5cdGxvY2F0aW9uOiB7XG5cdFx0c3RhcnQ6IHtcblx0XHRcdGxpbmU6IG51bWJlcjtcblx0XHRcdGNvbHVtbjogbnVtYmVyO1xuXHRcdH07XG5cdFx0ZW5kOiB7XG5cdFx0XHRsaW5lOiBudW1iZXI7XG5cdFx0XHRjb2x1bW46IG51bWJlcjtcblx0XHR9O1xuXHR9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVzY3JpcHRGb3JtYXR0ZXIoaXNzdWU6IGlzc3VlVHlwZSwgY3dkOiBzdHJpbmcpIHtcblx0Y29uc3QgeyBvcmlnaW4sIHNldmVyaXR5LCBmaWxlLCBsb2NhdGlvbiwgbWVzc2FnZSwgY29kZSB9ID0gaXNzdWU7XG5cblx0Y29uc3QgY29sb3JzID0gY2hhbGs7XG5cdGNvbnN0IG1lc3NhZ2VDb2xvciA9IHNldmVyaXR5ID09PSAnd2FybmluZycgPyBjb2xvcnMueWVsbG93IDogY29sb3JzLnJlZDtcblx0Y29uc3QgZmlsZUFuZE51bWJlckNvbG9yID0gY29sb3JzLmJvbGQuY3lhbjtcblxuXHRjb25zdCBzb3VyY2UgPSBmaWxlICYmIGZzLmV4aXN0c1N5bmMoZmlsZSkgJiYgZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGYtOCcpO1xuXHRjb25zdCBmcmFtZSA9IHNvdXJjZVxuXHRcdD8gY29kZUZyYW1lKHNvdXJjZSwgbG9jYXRpb24sIHtcblx0XHRcdFx0aGlnaGxpZ2h0Q29kZTogdHJ1ZSxcblx0XHRcdFx0Zm9yY2VDb2xvcjogdHJ1ZSxcblx0XHRcdFx0bGluZXNBYm92ZTogMyxcblx0XHRcdFx0bGluZXNCZWxvdzogMSxcblx0XHQgIH0pXG5cdFx0XHRcdC5zcGxpdCgnXFxuJylcblx0XHRcdFx0Lm1hcChzdHIgPT4gYCAgJHtzdHJ9YClcblx0XHRcdFx0LmpvaW4ob3MuRU9MKVxuXHRcdDogJyc7XG5cblx0cmV0dXJuIFtcblx0XHRtZXNzYWdlQ29sb3IuYm9sZChgJHtpc3N1ZU9yaWdpbnNbb3JpZ2luXX0gJHtzZXZlcml0eS50b0xvd2VyQ2FzZSgpfSBpbiBgKSArXG5cdFx0XHRmaWxlQW5kTnVtYmVyQ29sb3IoXG5cdFx0XHRcdGAke2ZpbGUucmVwbGFjZShjd2QsICcuJyl9KCR7bG9jYXRpb24uc3RhcnQubGluZX0sJHtcblx0XHRcdFx0XHRsb2NhdGlvbi5zdGFydC5jb2x1bW5cblx0XHRcdFx0fSlgXG5cdFx0XHQpICtcblx0XHRcdG1lc3NhZ2VDb2xvcignOicpLFxuXHRcdGAke21lc3NhZ2V9ICAke21lc3NhZ2VDb2xvci51bmRlcmxpbmUoYFRTJHtjb2RlfWApfWAsXG5cdFx0JycsXG5cdFx0ZnJhbWUsXG5cdF0uam9pbihvcy5FT0wpO1xufVxuIl19