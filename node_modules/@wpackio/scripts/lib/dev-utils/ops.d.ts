/**
 * Check if file exists or not using fs API.
 */
export declare function fileExists(filepath: string): boolean;
/**
 * Check whether current working directory is a typescript project.
 *
 *
 * @param cwd Current working directory.
 * @returns True if tsconfig is found, false otherwiise.
 */
export declare function hasTypeScript(cwd: string): [boolean, string];
export declare const WORDPRESS_NAMESPACE = "@wordpress/";
export declare const BUNDLED_PACKAGES: string[];
/**
 * Wpackio specific request to global transformation. This is used in
 * @wordpress/dependency-extraction-webpack-plugin.
 *
 * Unlike the default one, it doesn't transform react/reactdom, moment, jQuery
 * etc.
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/api-fetch` becomes `[ 'wp', 'apiFetch' ]`
 * - request `@wordpress/i18n` becomes `[ 'wp', 'i18n' ]`
 *
 * @param request Module request (the module name in `import from`) to be transformed
 * @returns The resulting external definition. Return `undefined`
 *   to ignore the request. Return `string|string[]` to map the request to an external.
 */
export declare function wpackioRequestsToExternals(request: string): string | string[] | undefined;
/**
 * Default request to global transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/api-fetch` becomes `[ 'wp', 'apiFetch' ]`
 * - request `@wordpress/i18n` becomes `[ 'wp', 'i18n' ]`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|string[]|undefined} The resulting external definition. Return `undefined`
 *   to ignore the request. Return `string|string[]` to map the request to an external.
 */
export declare function defaultRequestToExternal(request: string): string | string[] | undefined;
/**
 * Wpackio specific request to WordPress script handle transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/i18n` becomes `wp-i18n`
 * - request `@wordpress/escape-html` becomes `wp-escape-html`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|undefined} WordPress script handle to map the request to. Return `undefined`
 *   to use the same name as the module.
 */
export declare function wpackioRequestToHandle(request: string): string | undefined;
/**
 * Default request to WordPress script handle transformation
 *
 * Transform @wordpress dependencies:
 * - request `@wordpress/i18n` becomes `wp-i18n`
 * - request `@wordpress/escape-html` becomes `wp-escape-html`
 *
 * @param {string} request Module request (the module name in `import from`) to be transformed
 * @return {string|undefined} WordPress script handle to map the request to. Return `undefined`
 *   to use the same name as the module.
 */
export declare function defaultRequestToHandle(request: string): undefined | string;
/**
 * Get the name of the file from a file path.
 *
 * @param name Full path of the filename.
 * @returns Just the name of the file.
 */
export declare function basename(name: string): string;
/**
 * Build a file path to a lock file in the tmp directory
 *
 * @param {string} filename
 */
export declare function getLockFilename(filename: string): string;
/**
 * Create a lockfile (async)
 *
 * @param {string} filename
 */
export declare function lock(filename: string): Promise<void>;
/**
 * Remove a lockfile (async)
 *
 * @param {string} filename
 */
export declare function unlock(filename: string): Promise<void>;
